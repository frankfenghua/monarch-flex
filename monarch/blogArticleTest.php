<?php

// TITLE:  linguisticTest.php
// TYPE:   excutable
// AUTHOR: Ryan Lin
// DATE:   12/04/2008
// ABOUT:  Testing the functions in Linguistics.php
// ================================================================================

/*
error_reporting(E_ALL);
ini_set('display_errors','1');
*/

require_once('Linguistics.php');

$linguistics = new Linguistics();
$a = 'The case against Flex-based application UIs
02-Feb-2009   --   Comments -- none yet

We\'re starting to see more vendors coming out with Flex-based user interfaces, sometimes extending them as full-blown desktop applications using the AIR runtime. For example, Documentum\'s D6 Web Publisher comes with a standalone Flex interface for certain tasks.

To me, turning to Flex for a content management interface is a cop-out. It creates nice demoware for the vendor, but long-term problems for you. I can see why Flex is alluring for vendors: maintaining consistent, cross-browser compatibility (especially with AJAX) is hard and expensive. But why does that mean that you the customer must give up the simplicity and supportability of a native browser-based interface?

Flex is essentially another semi-thick client akin to Java applets (or ActiveX controls). Let\'s review why the business world didn\'t like applets for application user interfaces when they were pervasive within enterprise web applications earlier this decade.

They almost always violate web accessibility guidelines. Sure, many thin-client application interfaces are not compliant either, but at least you have the opportunity to make them compliant -- and many platforms (e.g., Plone) do so.

They create support nightmares. Things like automatic updates, license-checking, and incompatibilities with the underlying virtual machine lead to many a help-desk call. As my colleague Kas notes, with AIR instead of applets you are just replacing Sun\'s virtual machine with Adobe\'s. The potential for trouble remains.

They are prone to performance problems. Flex applications are prone to the same memory leaks and CPU spikes that bedeviled applets for years. To be sure, I\'ve seen some fat and ugly JavaScript-based interfaces too, but at least everyone can debug those openly. We\'ve also had customers tell us that their Flex interfaces are unusually chatty on their networks.

You can\'t easily modify them. The vendor sets a unified interface and all their customers have to live with it. That might work for a one-dimensional tool, like a Twitter client, but what about more heterogeneous, multidimensional environments?

To my mind, this last problem is really crushing. I recently participated in a Web CMS vendor demo for a consulting client, where the vendor unveiled their Flex-based webpage-builder interface to initial nods of approval. But then we asked the vendor to continue along the scripted scenarios, and the headshaking started becoming more horizontal. The way some elements were laid out didn\'t make sense to the customer team, and the empty placeholder blocks had confusing iconography and signaling.

Naturally, audience members asked how the interface could be re-configured. The vendor\'s reply: "We\'ll take it up with the product manager at headquarters." The air went out of the room (so to speak).

An answer we wanted to hear was, "You can modify the UI yourself on a role-by-role basis, and our platform is properly tiered, so we can show you how to customize it in a release-safe way."

Until your vendors\' Flex applications give you that freedom, I\'d urge you to stay away.

Anyone care to disagree? ';

$b = 'Flex SDK Source does not an “open source” project make
January 12th, 2009
Goto comments Leave a comment

The title of this post is a topic that has fired me up for a really long time. It is the idea that spurred me to get involved with some of the open source cfml frameworks that I use. Fusebox is actually a really great example of this. At CFUnited 05 and later Frameworks conf that year many people were talking about the fact that while Fusebox was technically open source, no one had any idea what was going on with the development of that project. Everyone knew who was responsible but we all felt like we had no mechanism for input into the framework. Sadly enough this was the opinion of several members of the infamous Fusebox Council. If I remember correctly it was then at those conferences that the steps were taken to change the leadership of the project and start the Trac and SVN sites to enable transparency in the project. I think it was this action that really spurred the growth of open source in the ColdFusion community. Now I don’t take any credit for this process, there were many folks involved, but the point is that the community around Fusebox was much happier and stronger once the mechanism for transparency was put in place.

At MAX US this last year I got on a tirade at the Openness at Adobe BoF session speaking about a very similar topic. Everyone was very excited by Adobe choosing to open the source the Flex SDK. But I will be honest that I never really understood their intentions. My joke at the session answered the question of why? “because the competition wont”. But it really is a great question. What does Adobe have to gain from open sourcing the Flex Framework. Opinions on this vary but after talking with lots of folks about this I really do think that they wanted to enrich the community and better the framework through community contribution.

So lets talk about contribution for just a second. I’ll be honest there are two ways I see of contributing to the flex framework. The first is reactionary, its bug fixes. It is submitting patches through the bug system to help eliminate software problems that made it out into production code. I am going to assume that 99% of the contributions Adobe get around flex are this kind of submission.

The second kind of contribution would be feature development. This would include adding new functionality to the SDK for inclusion in the framework. I would expect this to be the area where the community could most help Adobe in developing Flex because every serious Flex shop I know of is working off a private branch of the Flex SDK because they have needed to add some functionality or another that Adobe had not included. The problem is that there is currently no way to submit this kind of contribution to Adobe. You can not submit your new functionality and there is no forum to discuss what those features are and if the community believes they should be included.

This is the crux of this post/rant/whatever - Creating an open source project is about openness in planning and development. Not just about giving people the right to do with the code what they will. And this part of the Flex project is a complete failure. Adobe is in a prime position to absolutely crush any alternative framework or platform because they have built an enormous community of potential framework developers. Everyone who writes a single line of Actionscript 3 code is a potential contributor to the Flex SDK. The current Flex SDK team has about 20 developers and they are fiendishly working on the code for the next version of Flex, version 4 code named Gumbo. And they are doing all that development in private, behind closed doors with nothing but commit logs for us to know what is happening. This is an open source project and we have no idea what is going coming or what the timelines are for milestones. What the hell are the milestones?

While I may not agree with Adobe’s discussion to open source Flex (thats right, I don’t think they should have) they did. And its time that they fulfill the obligations of that decision. It is our responsibility as users of Flex that we hold them accountable for our project and that we ensure the project is being directed as we choose. It is up to us to ensure that stupid decisions guided by problems in the tools don’t affect the Open Source SDK. Of course I am talking about the decision to prefix all gumbo components with Fx. This is a stupid (project altering developer abandoning) solution to a problem that did not really exist. As I understand the problem from ranting at Adobe employees this was done because we can not style classes from the halo and gumbo toolsets separately using CSS. Because they have the same class name and are only separated by a xml prefix they can not be separately styled using the style selectors (ie Buttion {} ). But this is only a problem first, if you are using halo class and the same class from gumbo (ie Button) in the same project. And second this “problem” can be solved by using the styleName property or a couple other css tricks. And again while this is a very silly and bad decision (my opinion), the problem is that before this choice was made, before they decided to refactor the entire gumbo component set, before they chose to deviate from the standards they had set forth, no one in the community had a chance to give any input. And because the SDK is being developed behind closed doors in conjunction with the tools we use to write our code, we can’t change it back. Because even though the SDK is open, the other tools Adobe is writing are not, and they are major projects inside adobe that have financial connections within the company we can not comprehend.

I am a huge proponent of open source software. And I think its amazing that Adobe has opened so many of its products. But the time has come for them to change that from a marketing decision to an implementation that the community can provide input on. The community can not be kept in the dark about the plans and future of the Flex SDK. I understand that Adobe is a company that builds tools and makes money, but the tools should support the work of the community on the Flex SDK. The tools can not drive the decisions around the Flex SDK.

If you agree make sure adobe knows. I have talked to everyone I have access to. Make sure that everyone you know at Adobe understands this problem because its the only way we can get this issue resolved. Dave McAllister tells me that Adobe will always develop the Flex SDK as a Benevolent Dictatorship. I am totally ok with that as long as I know that they decisions they make are influenced by the voice of the community. And that Adobe knows that if they F*@K this up, we can and will fork and fix the SDK.';

$c = 'The Flex SDK team talk
Submitted by Falken on Wed, 28/01/2009 - 23:16.

    * Flex

(follow up to Talk to Adobe\'s Flex SDK team )

Well, that was... manic :-)

There was, I think, the general admission that things could be improved - Adobe being more transparent and talking more things through in public, for instance.
It was also acknowledged that it\'s probably too late to try and get your pet feature into Flex 4, but it was said they\'ll pick up on the speed that submitted patches are accepted. Being able to submit patches is a great way to get started with a new project, because you\'ll normally be able to focus on a small set of functionality.

Flex 5, the ongoing development of Flex 4 and the bug fixing in Flex 3  have a strong, open, future ahead of them, based on what I heard.
Public meetings at the start of each 6 week-ish cycle for the Flex team will also help involve the community in steering Flex into the product we want.

One thing that did come across was how much everyone there loves the platform, and appreciates the time that people pour into it. Nice to be using something other people love.

Trying to have a sensible ordered discussion with around 200 other people in a real time chat session is... interesting - I guess we were all surprised just how many turned up, but any sort of working through of the things listed at the start was going to be difficult.
Something else will have to used next time - maybe the same voice/unvoice ask-the-moderator system used on IRC would work better in Connect. ';

$d = 'Take Flex Back For the Community
January 19th, 2009
Goto comments Leave a comment

The answer to the question “Can it be done?” has been answered. On friday afternoon I checked out the Flex SDK from svn, and I made some modifications. I renamed all the Fx classes back to normal names and I updated all the code references. I replaced the old library manifest files so that the the halo and gumbo code libraries can be referenced independently. I compiled the SDK and have made a couple example app to ensure my changes work. Then I went through the practice of updating my code from the commits on the official Adobe Flex SDK. Taking their change and keeping the code base up to date is relatively simple and I could probably automate it. The easy part is over, changing the code works. I can name half a dozen development shops that run custom versions of the Flex SDK because they needed to fix problems that came up in their projects. Fixing the code is easy. Contributing that code to the community is hard.

Propagating your code fixes to the community can happen in a couple ways. If you are a blogger you can share the problem and the solution so that other folks can find it and then make their own version of the SDK. What you would really like to do is probably submit your addition to the Flex team so that it can be considered for inclusion in the next release of the product. But lets say you do actually get the SDK team to take a look at your patch and for whatever reason (those discussion are had behind closed door so we won’t likely know) they reject your submission. Your only recourse left to release the code you know will benefit the community is to release your full version of the modified SDK allowing people to use and work from your version of the code. Essentially you can fork the Flex SDK project.
What is a fork

Think of a fork in the road. Where once there was one path, now there is two. And who knows if the two paths will ever intersect again. What does that mean to us as a community? Well it means that there is an alternative to the Flex SDK from Adobe that has a feature that the Official SDK does not. Is everything else about the two frameworks the same? That depends a lot on the developer or team that creates the fork. There is no reason the developers can not continue to incorporate the updates from the Adobe Flex SDK. For the community it means a choice about what framework they use to build their RIA applications that target the flash player. To the fork provider it means being willing to accept responsibility for accepting bugs, feature requests and documentation, Just like any other open source project. But having the fork and supporting it does not really solve the initial problem. The problem that we as a community still don’t have a forum for discussion the development of the open source project. All we have really done is create two projects that we don’t get any real input on.

So what does a fork mean to Adobe? What does an alternative framework targeting the Flash runtime change for them? Does it create an environment that includes healthy competition? Does it mean that all the work they have done has not been appreciated by the community? The real question I want answered is does having another framework that includes features and code based on community input challenge them to change the process around how they communicate and plan the development of the Flex SDK?

Because right now, I don’t feel we get any voice. And while Adobe has committed to opening up this process, how do make this change a priority for them? Every day decisions are being made behind closed doors that effect the framework (the open source framework) that we know and love and have built our careers on. What kind of action is required to make Adobe’s top priority making good on the promise of an open source framework?

This is not a small problem that can be easily remedied. The Flex framework has brought thousands of developers to the Flash Platform. The Flash Platform is a key business tool for Adobe. Flex is at the heart of the building “engaging experiences” that all of Adobe’s tools focus on. Flex may have been open sourced, but Adobe is in no hurry to let go of any of the control over the direction of the Framework. Far to many of its money making applications require it. But those tools only ease development utilizing the features in the framework. And there is no reason not to have an open forum for discussion of the features being implemented by the SDK team. In fact opening those discussions will allow the community to contribute more than bug fixes. How many times have you talked to a member of the Flex team about something you really wanted to see in the framework and found out that they had discussed it but didn’t have the resources to implement it before the release. Opening up the discussion around the implementation of features and what features are being implemented allows Adobe to utilize the entire Flex developer ecosystem to make sure that every release is the most amazing it could possibly be.
What can we do

Flex is an open source framework. It is licensed under the Mozilla Public License and as such it is within our power to take what Adobe has given us and do with it what we will. The only stipulation on that is that anything we release in binary form we also release in code form, and that we list what we have changed in the releases, upholding all original licenses on the original code.

Flex is ours. Adobe gave it to us when they open sourced the code. Our jobs as Flex developers depend on that framework being the best it can be. And how can that be the case when everyone is using their own version of the framework in private because they have no means to submit that back, and the community has no way to voice their need for those submissions. The development of “our” framework must be done in the open with the planning done in the open and the input on what gets in open to our voice. And Adobe needs to know that if they can not or will not allow us to participate in the development of “our” framework, that we will utilize our rights to take what they have given us and do what they will not.

Now is the time to use your voice, be that at your local user group, on your Blog, within your company or on your favorite mailing list. Now is the time to make sure that Adobe knows that we will not stand by and allow them to decide what is best for our framework. Now is the time to be loud and make some noise to make sure Adobe knows our desires and intentions. We need them to understand that they have an opportunity to stop us from forking the framework. And that any decision other than to implement an open process for discussion of development and inclusion of features, will result in the community taking the matter into our own hands.

Now is the time. Make some noise.';

$e = 'Entering Into The Conversation in the Post-Cluetrain World
Posted in Enigmacopaedia, Business, Inspirations, RIA, Personal by Joeflash on the January 24th, 2009

So I’m finally getting around to reading the Cluetrain Manifesto that came free with my admission to 360|Flex last year, and in just a few days I’m nearly finished it. What a mind-blowing book. Not because I didn’t know that “markets are conversations” or that the internet is bringing back conversation into the monolithic institution of producers vs consumers, marketeers vs consumers, putting an axe and throwing a wrench into the anti-conversation of broadcast-based production. No, I think it’s an amazing book because I realize I’m already living it. And suddenly a whole lot of my life makes sense. The jobs I’ve chosen, the politics I’ve embraced, even my particular brand of faith (for which I will spare you the description).

Back when I was growing up, my parents, intrepid souls that they were, unwittingly did the greatest thing they ever could for a child growing up in the 70’s: our television, a hulking Admiral Colour TV (back when a television was a piece of furniture), broke one day when I was five. And it stayed broken till I was twelve years old. So what did I do? I built LEGO. I tinkered with my 200-in-One Electronics set from Radio Shack. Took apart every appliance I could find, just because it All Looked Really Really Cool Inside. I read, comics at first, then full-blown grown-up novels, at a time when most kids were still learning See Jane Run. Then Shakespeare and Tutankhamen and Astrophysics. The point of this is not to cast myself as some child prodigy (which I wasn’t), but to state where my relationship to The Marketplace all started. The only relationship to the marketplace, growing up, was with vendors, not their intermediary marketing campaigns. (And from mysterious gifts from the sky arriving at Christmas time, but that’s another story.) From the earliest age, I grew up tinkering, conversing with technology, not being a passive consumer of it.

By the time I reached High School I began to suspect, by the pathological relationship that most of my fashion-victimized peers (remember, this was the 80’s) always wanted to hang around in malls, that something deeply disturbing was wrong with the world, though I could not put my finger on it at the time. Not the “global world,” which I knew was totally fucked (Regan and Gorbachev have got how many Nukes? How much of a dumbass do you have to be to invent such a thing?), but something more subtle — not quite like Neo’s “splinter in your mind, driving you mad,” but close. Whereas I, being a geek, wanted nothing more than to hang out in Arcades (this was in the days before Nintendo and XBox, when you had a choice between shitty graphics and slow games on Atari 2600 and Commodore 64 or super fast games at the arcade), and play Dungeons and Dragons all day long, where I could actually exercise the imaginary capacity that seven solid years of science fiction and fantasy reading had gifted me with.

I hated malls. I hated television and advertising even more. My friends called me the “Commercial Nazi” because I’d insist that commercials be muted so we could actually hear ourselves think in between consumed silences watching canned entertainment, which meant that it took a special brand of individual to put up with me when I was younger. :) The reason for such behaviour was that I could not stand bullshit in any form, and television was just one big mindfuck in my view. So I sought to figure out what was bothering me with the world, and for a while I found my answer in advertising. In my teenage years I studied media, even before AD Busters began waving their anti-corporate banner. I read McLuhan and Chompski and Naomi Klein and others. I knew of the subliminal messages in the alcohol adverts and Time Magazine covers, and the subtexts in print ads, and when you see flowing water or complex CGI you’re almost always getting the corporate, dumbed-down equivalent of an MK-Ultra mind-programming job. The Marketplace was a dupe, the bourgeois equivalent of a third world minefield. One wrong step and BOOM! Instead of high explosives, the danger were the catchy jingles, tired skits, mind-numbing repetition of subliminal cues — all rhetorical logic bombs set to go off in your subconscious, waging war in your mind for that one moment of weakness, when you’re thirsty, driven by instinct rather than rational thought… and next thing you know it, oh, I guess I’ll have a Coke — even though water will do the trick much better, wondering half way through why the hell you’re drinking this shit.

I usually compensated for such borderline paranoid idiosynchronicities in my days of youth by throwing awesome D&D parties, or being the life of someone else’s. I learned a lot about conversation in those D&D sessions, and maybe a little about acting (or “role playing” as it’s called). This is where one person plays the Dungeon Master, likened to the wise man in the circle holding the “talking stick” in the days when tribes would tell stories around the fire. The game master would guide the storyline, but let the players unfold the story through their actions. And there would be gaming books, lead figurines, graph paper, weirdly shaped dice, and lots of munchies and pop. And Magic Missiles, heh heh.

If only the rest of the world — school, work, shopping, even politics — could be like a Choose Your Own Adventure book, or a good game of D&D. Where we all played not to win or conquer, but to share in a good story. (Of course I was also into strategy games, so that metaphor doesn’t completely hold water. I usually kicked ass at Axis & Allies, even won a few tournaments — sometimes, having fun was about Crushing Your Enemies Into the Dust. :) But we never got as serious about it as religious or political fanatics can get, and whomever lost bought the burgers after and got ribbed for “making such a dumbass move at Karelia SSR”, so it all ended well.)

By the time I entered the workforce in my 20’s, I realized a hard truth, or what I considered to be so. In my view back then, to succeed, you had to sell out, plain and simple. I felt like a hippie out of time. Which meant giving up your voice in favour of taking someone else’s as gospel. Whether it was organized religion trying to sell you a set of life principles, a marketplace trying to sell you a lifestyle of goods, or an education trying to sell you a canned knowledgebase and worldview, it was all the same bullshit in my view. Unless you were a) fortunate enough to be brought up from money, b) were genius enough to make your own rules, or c) gutsy enough to wage war with the best of them and be one of those “young entrepreneurs” in the marketplace, the only choice was to join the Rat Race. (I use many cliche’d metaphors and tired aphorisms in this description, because that’s truly how I thought back then.)

I didn’t go to university, because even though I had top grades to go to engineering school, at the time higher education seemed to me to be just a different form of market — rote memorization instead of sales pitches. Not to mention the resulting student debt. Booooring. Of course Canadian higher education has become a lot more hands-on since the early 90’s, and as I’ve matured so have my attitudes towards it. So I spent most of my 20’s rebelling against the institutions of the day in my spare time through various environmental organizations, to attending art classes in night school, doing poetry readings in cafe’s, messing around with computers and gadgets, while during the weekday I was a Working Stiff. I figured if I couldn’t make a living Doing What I Loved (whatever the hell that was), I was going to have to Sell Shit To Other People. And if I was going to be Selling Shit To Other People to make a living, I was going to be damn good at it. So for a while I did door-to-door, retail, telemarketing, MLM, anything to make a buck (legally). And for a while, I got a perverse pleasure out of the irony of knowing I was both the Joker and the Hanged Man, the duper and the dupee, the seller and the consumer, the huckster and the sheep. I figured that someday I’d have to get out, somehow, or risk turning into that bitter old man in Accounting or that control freak in Marketing whom insisted in making everyone’s lives miserable every minute of the day, but whom the suits loved because he Sold The Most Shit. I had no exit strategy, didn’t even know what that meant, but fortunately, one came knocking all on its own. (Or it’d probably be some insane homeless guy by now. Or a lawyer, take your pick. ; )

Along the way, doing web pages and print newsletters for the various non-profits I volunteered for, I’d taught myself HTML and Photoshop, even took a year of part time college thinking this may actually turn into something, someday. Maybe. Even got a few summer jobs doing web work in the mid-90’s. And then one day in 1998, a friend of mine working for a startup in Toronto asked if I’d be their web design guy. Here was a company composed of misfits like me, making up the rules as they went along, with even less tolerance for bullshit then I did, willing to take a chance on doing something Truly Interesting.

This was where I learned that work could actually be fun, when there was no Marketing Department, no Daily Memos from Head Office, no Pep Rallys, and no Quotas. Heaven. We had a fuckin blast. Playing Warcraft and Starcraft over the network until 3am, throwing airplanes and gumballs across an office with no cublices, using the most kick-ass equipment money could buy, going for lunch whenever the hell we wanted, and laughing our asses off just as often as we swore at the top of our lungs when the god damned server had gone down again, and who the hell fucked with the code I checked in yesterday? We all bought a scooter and played hall tag around the doughnut hallway until we dropped, just to let off a little steam after hacking out a new point release for the suits to gawk over the next morning. And we worked crazy hours, even sleeping there overnight sometimes on the futon couches. But we didn’t care. Work and play could not be separated, it defined who we were. We were geeks, technofreaks, and getting paid very well to be the weirdest nerdiest guy in the room.

This was an experience that rocked my world. I had gotten so used to thinking of work, a job, as The Enemy, a necessary evil to acquire that consensus monopoly paper requiring us to buy things like food and clothes and rent. The Internet changed my relationship to production, to work, to capital, to self happiness. Of course the bubble burst, and the very next job I got in 2001 was at a bank, because all the agencies were downsizing, and all the startups had gone belly up. Before I was doing JavaScript, XHTML, PHP, print brochures, graphic design, Flash, you name it. Now I was designing banner ads all day long, trying to find a way to tell my boss that the boobs in marketing wouldn’t know a web page from their ass, without losing my job. If I thought my previous corporate experience was numbing, this was a soul-crushing mind fuck. But I put up with it, because just after my six-month anniversary, nearly to the day I was ready to throw in the towel, two aeroplanes collided with some very tall buildings in New York. And suddenly the job market, and the world, didn’t seem like such a safe place to be. So I put up with it, for another year.

But gradually, and in the last eight years, after working for others, and working for myself on and off, I have figured out a way to work that is tailored to my own personality, talents and aptitudes, and do it successfully. And in working in the Flash, and now the Flex communities, I have learned some valuable lessons along the way. I learned that everyone has the spark of genius in them, if they have the courage to find their own voice. And part of finding your own voice is treating your work as a craft, not a product, and finding an industry that will respect and reward your desire to create and excel at your craft, rather than being an itemized function of production in a nameless assembly line. Today, I feel fortunate that I am living the dream which for so long I sought, hoped for in my youth back when it seemed more like a religious belief than a tangible possibility.

In reading the Cluetrain Manifesto, I realize that an Epilogue is in order, since many of the references are sounding a little dated at 2000. The very fact that many companies now have public bugbases, have their engineers participate in public lists, and have people who wear the title of Evangelist — a job title to my reckoning never even existed five years ago — is proof that many companies have gotten the message, and are living this concept, even if they have never read the book which defines this new paradigm.

I owe a debt of gratitude to an industry today that is living the Cluetrain Manifesto. I do not consume Adobe’s products, and my clients do not consume my services, nor do I need to be marketed to nor do I market myself in return. There is no selling. There is only authentic communication. There are only conversations. Anything less is bullshit. And work is fun, most of the time.

I’m not saying that the RIA industry was the first to get it, just that it gets it. If Adobe or Sun or Microsoft puts out a product that I think sucks, I tell them, on discussion lists, on boards, on blogs. If they don’t listen, I find a hack, a workaround, a tweak, or I discard the decrepit bloatware and route around it like network damage, noise-to-signal bandwidth filtered out as irrelevant data. But if they do a good job, I also tell them, by telling others, in blog posts, in my conversations, my tutorials, and now our book, how to use the technology, what’s good and not so good, and how to route around the not so good parts, how to make it better, have more fun with it. If I, the programmer down in the trenches, feels that Adobe is making a bad move in a certain sphere of their product development, or could improve in certain ways that would increase my ability to do my job better (which ultimately means having more fun building Cool Shit ; ), I tell them so. I can enter into a conversation with one of a few of their Evangelists, their engineers even, at conferences, in discussion lists, in blogs, in bug tracking sites. And they listen.

Hell, they even sent me a limited edition t-shirt with my name on it along with all the other people who helped contribute input on the Flex bugbase. Think about it — a company, giving me a t-shirt applauding me for finding bugs in their shit. Only, in a conversation of co-creation, finding bugs is not perceived as finding fault, which is often associated with incompetence. Instead it is perceived as valuable input. As it should be. Because we’re all in this together. I help the company fix their shit, they give me better and more improved shit, and pretty soon I’m making some amazingly cool shit with their shit. (Okay, I think I’ve really exhausted that colloquialism!)

I am still amazed every time this happens, this active conversation and collaboration between corporation and customer, even as it becomes the norm. We need to remember, as designers and programmers in this industry, that what we are doing for a living was not possible even ten years ago. That in entering into a dialogue, with a corporation or a client who is a willing participant, to approach the conversation with a certain humility, and a willingness to listen in return. Demands and complaints and boasts are not conversations, they are temper tantrums, and such immaturity — whether it be trigger-happy flammers, or PR trying to enter into fake conversations, or lazy-assed help vampires — does a huge disservice to the gains which generations have striven so hard for us to reach this pinnacle of evolution, from the minority rights and woman’s lib movements to the geniuses in silicon valley who started it all in the 70’s. We owe them all a huge debt; we owe it to them to honour their work, by honouring ours, and demand that companies do the same.

What if the rest of the world, the rest of the marketplace could act like the software industry, in a spirit of co-creation? What if there were few corporate secrets, just features not yet revealed or unveiled? What if Ford or GM or Toyota were to open source their entire engineering specs, encourage others to build Ford cars, even tell them how to make manufacturing plants run at the efficiency that decades of expertise has taught them? And smaller companies could innovate on that design for a licensing fee, and manufacturing plants were tooled to make not just one type of car, but essentially were geared for rapid prototyping? What if the assembly workers could help in the design process, the engineering, the manufacturing side of things? They’d never shut a plant down, because workers would not be cogs in a chain knowing how to do one microscopic operation their entire careers: the company would be losing valuable intellectual capital if they laid off their workforce. You also could not easily pay third world workers two dollars a day to build cars, because they would not have the ability to enter into the conversation unless they were better educated. And better educated workers means leverage to ask for higher wages, as India did with its workforce in the 90’s for its IT industry. And customers could recommend features, demand improvements, and car tinkerers could buy a car as a kit and build it themselves if they wanted to, even improve on the design while adhering to certain safety and regulatory standards.

What if employees and customers were all co-creators if they chose to be? Everyone would still make tons of money. Because in a system of co-creation, money is a symptom of prosperity, not its underlying goal.

The legal, intellectual property, and regulatory systems would have to be rewritten, or become obsolete, irrelevant. And many industries would have to transform or die outright. It isn’t hard to figure out which.

Adobe gets it. Microsoft is starting to get it. Apple still has to get it IMO, but shows promise every once and a while. Is your company getting it? Are you getting it? Are you talking WITH your customers, instead of talking down to them?

Are you listening, Acme Company, secure in your broadcast marketing paradigm? Get this: NO ONE GIVES A SHIT ABOUT YOUR PR, YOUR ADVERTS, YOUR TALKING HEADS, YOUR REVIEWS IN THE TIMES OR THE VALUE OF YOUR STOCK. We don’t even give a shit about your product, or your clueless attempts to ‘fake it’ by ‘going viral’ and ‘engendering community’. Either you talk with your customers, ask them how you can become a better company, how they can help you make better products, or forget it. You might as well close up shop. And pretty soon you’ll be a dinosaur picking the bones off a dead corpse. Because the more people clue into their ability to find their voice, to treat their work as a craft, the more they will refuse to act as consumers, and will insist on living as co-creators.

Because of the RIA industry, Adobe, and my fellow co-creators, today I build cool stuff for a living, and make a damn good living doing it. I am a Flex and Flash Platform developer. As is my choice I am not tied to a geographical location, I can live pretty much anywhere there is an internet connection, I can take lunch breaks and vacations whenever I feel like, go to as many conferences as my schedule and my pocketbook will allow, and love accepting a certain amount of risk in having my freedom. And I create and have conversations. If work is an indication of total time spent in front of the computer, since there really is no division between work and play for me, then I have a 70-hour work week. And I love every minute of it.

My thanks goes to Tom and John, for building a conference which adheres to the principles of the Cluetrain Manifesto. For turning me on to this book. Which has reminded me of why I am in this industry in the first place, and why I love what I do.

I have a new dream. To continue building cool stuff, exploring the co-creating potential of the RIA industry, and inspire others to join in on the conversation. So collectively we can be an example, a beacon to the rest of the world. And maybe, one day I’ll be able to mail order myself a custom kit for a new all-terrain, 4 wheel drive, zero-point cell-powered electric car. Which was co-designed by five million people who care about our world.';


echo '<h1>Blog Test 1: <a href="http://www.cmswatch.com/Trends/1492-The-case-against-Flex-based-application">The case against Flex-based application UIs</a></h1>';
printf('<br /><b>goodness of "Flex":</b> %f', $linguistics->goodness('flex', $a));
echo '<h1>Blog Test 2: <a href="http://blog.simb.net/2009/01/12/source-does-not-open-source-make/">Flex SDK Source does not an “open source” project make</a></h1>';
printf('<br /><br /><b>goodness of "Flex":</b> %f', $linguistics->goodness('flex', $b));
echo '<h1>Blog Test 3: <a href="http://www.rachaelandtom.info/content/flex-sdk-team-talk">The Flex SDK team talk</a></h1>';
printf('<br /><br /><b>goodness of "Flex":</b> %f', $linguistics->goodness('flex', $c));
echo '<h1>Blog Test 4: <a href="http://blog.simb.net/2009/01/19/take-flex-back-for-the-community/">Take Flex Back For the Community (and other subheadings)</a></h1>';
printf('<br /><br /><b>goodness of "Flex":</b> %f', $linguistics->goodness('flex', $d));
echo '<h1>Blog Test 5: <a href="http://www.joeflash.ca/blog/2009/01/entering-into-the-conversation.html">Entering Into The Conversation in the Post-Cluetrain World</a></h1>';
printf('<br /><br /><b>goodness of "Adobe":</b> %f', $linguistics->goodness('adobe', $e));
// echo '<hr><h2>Spelling</h3>';
// printf('<i>%s</i><br /><br /><b>spelling:</b> %f', $a, $linguistics->spelling($a));
// echo '<hr><h2>Punctuation</h3>';
// printf('<i>%s</i><br /><br /><b>punctuation:</b> %f', $a, $linguistics->punctuation($a));
// echo '<hr><h2>Capitalization</h3>';
// printf('<i>%s</i><br /><br /><b>capitalization:</b> %f', $a, $languistics->capitalization($a));
// echo '<hr><h2>English Proficiency</h3>';
?>
