<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ns1="http://www.adobe.com/2006/air"
	addedToStage="init(event)" viewSourceURL="srcview/index.html">
    <mx:Script>
        <![CDATA[
        import mx.controls.textClasses.TextRange;
        import flash.html.HTMLLoader;
        import flash.net.URLRequest;  
		import mx.core.UIComponent;
        
		private var unmodifiedBackground:String;
		private var modifiedElements:Array;
        
        private var html:HTMLLoader;
        private var urlLoader:URLLoader;
        private var pageContents:String = "";
        private var currentMatches:Array;
		
		private function init(event:Event):void
		{
			html = new HTMLLoader();				
			html.addEventListener(Event.COMPLETE, onHTMLLoadComplete);
 			
			// Create UIComponent to add html object to  
			var myComponent:UIComponent  = new UIComponent();  
			myComponent.addChild(html);  
  		    		
  		    // Scale HTMLLoader down
    		// myComponent.scaleX = 0.8;
    		// myComponent.scaleY = 0.8;	
  			
  			// now add component to stage  
			htmlBox.addChild(myComponent);
			
			modifiedElements = new Array();  
		}
			
		private function onHTMLLoadComplete(event:Event):void {
			
			html.width = htmlBox.width;
    		html.height = 2880;

    		highlightButton.enabled=true;
    		
    		// Make pageSource textArea visible
    		pageSource.height = pageSourceBox.height;
    		pageSource.width = pageSourceBox.width;
    		pageSource.text = html.window.document.documentElement.outerHTML;
  /*     		pageSource.selectionBeginIndex = 15;
    		pageSource.selectionEndIndex = 25;  		
    		var trange:TextRange = new TextRange(pageSource, true);

    		
    		trange.fontStyle = "italic"; */
       	}
		
		private function highlightMatches(event:Event):void {
			// Reinitialize match label and match text
    		matchesLabel.text = "No captured text";
    		matchesText.text = "";
    		
    		var usrRegex:RegExp = new RegExp(regexString.text, "");
    		
    		// Be sure that we are modifying unhighlighted page	
			for each(var elem:Object in modifiedElements) {
				elem.style.background = unmodifiedBackground;
			}
    		
    		modifiedElements = new Array();
    		
    		// Begin highlighting matches from root node
    		trace(html);
    		highlightMatchesRec(html.window.document.documentElement, usrRegex);
		}
		private function highlightMatchesFromList(elemList:Object, regex:RegExp):void {
			// Save an unmodified background color
			unmodifiedBackground = elemList[0].style.background;
			
			// Highlight all elements in the element list that match the regular expression
			trace(elemList.length);
			for(var i:Number = 0; i < elemList.length; i++) {
				var match:Object = regex.exec(elemList[i].outerHTML);
				if(match != null) {
					if(match.length >= 2) {
						if(matchesLabel.text.charAt(0) == "N") {
							matchesLabel.text = "Captured Text"; 
						}
						matchesText.text += ("\n\n* " + match[1]);
					}					

					modifiedElements.push(elemList[i]);
					elemList[i].style.background = "yellow";
					trace("Highlighting "+elemList[i].outerHTML.slice(0,10)+" . . . ");
				}
			}
		}
		
		private function highlightMatchesRec(elem:Object, regex:RegExp):void {	
			trace("Element type = " + elem.tagName);
			// trace("Element outerHTML = " + elem.outerHTML);
			// If there is no match within this node, return
			if(elem.outerHTML.search(regex) == -1) {
				return;
			}
			// There is a match so recurse and highlight matches
			else {
				var children:Object = elem.getElementsByTagName("*");
								
				var childHasMatch:Boolean = false;
				for(var i:Number = 0; i < children.length; i++) {
					if(children[i].outerHTML.search(regex) != -1) {
						childHasMatch = true;
						highlightMatchesRec(children[i], regex);
						return; // find only the first match
					}
				}
				
				// If there are no children which match the regex, run the tag-name-based
				// algorithm on nodes having the same tag name as this element
				if(childHasMatch == false) {
					trace("Tag Name = "+elem.tagName);
					highlightMatchesFromList(html.window.document.getElementsByTagName(elem.tagName), regex);
					// elem.style.background = "yellow";
				} 
			}
		}
		
		private function loadPage(event:Event):void {
			html.load(new URLRequest(searchTerms.text));
		}
		
		]]>
    </mx:Script>
    <mx:VBox height="51" horizontalAlign="left" width="1044">
    	<mx:HBox>
    		<mx:Label text="Website"  width="112"/>
    		<mx:TextInput id="searchTerms" text="http://reddit.com" />
    		<mx:Button label="Show Page"
    			click="loadPage(event)" id="showPageButton" width="127"/>
    	</mx:HBox>
    	<mx:HBox>
    		<mx:Label text="Regular Expression" />
    		<mx:TextInput id="regexString"/>
    		<mx:Button label="Highlight Matches"
    			click="highlightMatches(event)" id="highlightButton" enabled="false"/>
    	</mx:HBox>
    </mx:VBox>
    <mx:HBox id="hBox1" horizontalAlign="left" verticalAlign="top" width="1042" height="100%">
        <mx:VBox height="100%" width="402" id="htmlBox" label="Page View">
            <mx:Label text="Page View" fontSize="10" fontWeight="bold" color="#0C5463"/>
        </mx:VBox>
        <mx:Spacer/>
        <mx:VBox height="100%" width="400" id="pageSourceBox" label="Page Source">
            <mx:Label text="Page Source" fontSize="10" fontWeight="bold" color="#0C5463"/>
            <mx:TextArea width="100%" height="336" id="pageSource"/>
        </mx:VBox>
        <mx:VBox height="100%" width="214" id="matchingTextBox">
            <mx:Label id="matchesLabel" text="" fontSize="10" fontWeight="bold" color="#0C5463"/>
            <mx:Text width="213" height="100%" id="matchesText" text="" color="#0C5463"/>
        </mx:VBox>
    </mx:HBox>
</mx:WindowedApplication>
