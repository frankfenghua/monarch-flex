<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="creationCompleteHandler(event)" show="showCanvasHandler(event)" width="1013" height="615" xmlns:ns1="*" horizontalScrollPolicy="off" verticalScrollPolicy="off">

	<mx:Metadata>
		[Event(name="OpenCommunityGroupSelectionClickedEvent", type="flash.events.Event")]
		[Event(name="OpenCommunityGroupHomeCanvasEvent", type="flash.events.Event")]
		[Event(name="OpenAdditionalWebsiteInformationEvent", type="cAccordionWebsiteGraphicEvent")]
		[Event(name="OpenCommunityGroupEditorCanvasEvent", type="cCommunityGroupEditorEvent")]
		[Event(name="FetchWebsiteAnalytics", type="cAllPurposeEvent")]
		[Event(name="OpenAddWebsiteWindowEvent", type="cCreateWebsiteEvent")]
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import mx.messaging.channels.StreamingAMFChannel;
			import mx.events.TweenEvent;
			import mx.events.ItemClickEvent; 
			import mx.effects.Fade;
			import mx.effects.Move;
			import mx.effects.Tween;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
					
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	when the server is done incrementing the community view count, this is called
			 */
			private function viewCountHandler(event:ResultEvent):void  
			{
				// do nothing
			}

			/**
			 * 	Called when the user clicks the edit community group button.
			 */
			private function editCommunityGroupButtonClickHandler(event:Event):void
			{
				var e:cCommunityGroupEditorEvent = new cCommunityGroupEditorEvent("OpenCommunityGroupEditorCanvasEvent");
				e.mCommuniutyGroupName = mCommunityGroupNameLabel.text;
				e.mCommunityGroupId = mCommGroupId;
				e.mWebsites = mWebsites;
				e.mKeywords = mKeywords;
				this.dispatchEvent(e);
			}

			/**
			 * 	Called when the user clicks on the home label.
			 */
			private function homeLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupHomeCanvasEvent");
				this.dispatchEvent(e);
			}
			
			
			/**
			 * 	Called when the user clicks on the community label.
			 */
			private function communityLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupSelectionClickedEvent");
				this.dispatchEvent(e);
			}
		
			
			/**
			 *  
			 */
			 private function lineChartCanvasCreateHandler(event:Event):void
			 {
			 	//mLineChartCanvas.updateInformation(mAnalyticsParser, null);
			 }
			 
			private function changeTimeSpan(event:ItemClickEvent):void 
			{
                switch(event.index)
                {
                	case 0: mStatEvent.mTimeSpan = mStatEvent.TIME_SPAN_1_YEAR;   break;
                	case 1: mStatEvent.mTimeSpan = mStatEvent.TIME_SPAN_9_MONTHS; break;
                	case 2: mStatEvent.mTimeSpan = mStatEvent.TIME_SPAN_6_MONTHS; break;
                	case 3: mStatEvent.mTimeSpan = mStatEvent.TIME_SPAN_1_MONTH;  break;
                	case 4: mStatEvent.mTimeSpan = mStatEvent.TIME_SPAN_2_WEEKS;  break;
                	case 5: mStatEvent.mTimeSpan = mStatEvent.TIME_SPAN_1_WEEK;   break;
                }
                mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
            }
			 
			 
			 /**
			 * 	Called when the user clicks the 1 year radio button.
			 */
			/*
			private function _1YearTimeSpanRadioButtonChangeHandler(event:Event):void
			{
				mStatEvent.mTimeSpan = mStatEvent.TIME_SPAN_1_YEAR;
				mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
			}

			private function _9MonthsTimeSpanRadioButtonChangeHandler(event:Event):void
			{
				mStatEvent.mTimeSpan = mStatEvent.TIME_SPAN_9_MONTHS;
				mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
			}
			

			private function _6MonthsTimeSpanRadioButtonChangeHandler(event:Event):void
			{
				mStatEvent.mTimeSpan = mStatEvent.TIME_SPAN_6_MONTHS;
				mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
			}
			
			private function _1MonthTimeSpanRadioButtonChangeHandler(event:Event):void
			{
				mStatEvent.mTimeSpan = mStatEvent.TIME_SPAN_1_MONTH;
				mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
			}

			private function _2WeeksTimeSpanRadioButtonChangeHandler(event:Event):void
			{
				mStatEvent.mTimeSpan = mStatEvent.TIME_SPAN_2_WEEKS;
				mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
			}
			
			private function _1WeekTimeSpanRadioButtonChangeHandler(event:Event):void
			{
				
				mStatEvent.mTimeSpan = mStatEvent.TIME_SPAN_1_WEEK;
				mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
			}
			*/
			 
			
			/**
			 *  Called when the user has requested an event from the website graphic within the accoridion 
			 * 	component.
			 */
			private function accordionWebsiteGraphicEventHandler(event:cAccordionWebsiteGraphicEvent):void
			{
				if(event.mType == event.OPEN_ADDITIONAL_INFORMATION) {
					var e:cAccordionWebsiteGraphicEvent = new cAccordionWebsiteGraphicEvent("OpenAdditionalWebsiteInformationEvent");
					e.mWebsiteName = event.mWebsiteName;
					e.mCommuniutyGroupName = mCommunityGroupNameLabel.text;
					e.mCanvasType = mCanvasType;
					this.dispatchEvent(e);
				}
				else if(event.mType == event.WEBSITE_CHECKED) {
					var e1:cAllPurposeEvent = new cAllPurposeEvent("FetchWebsiteAnalytics");
					e1.mWebsiteName = event.mWebsiteName;
					e1.mCommGroupId = mCommGroupId;
					this.dispatchEvent(e1);
					
					this.cursorManager.setBusyCursor()
					mStatOptionAccordion.enabled = false;
					mGraphControlPanel.enabled = false;
					mChartTimeSelectPanel.enabled = false;
				}
				else if(event.mType == event.WEBSITE_UNCHECKED) {
					Alert.show("UnChecked");
				}
			}
			
			/**
			 * 	Called when the user clicks on the add website button.
			 */
			private function addWebsiteClickHandler(event:Event):void
			{
				var e:cCreateWebsiteEvent = new cCreateWebsiteEvent("OpenAddWebsiteWindowEvent");
				e.mCommunityGroupId = mCommGroupId;
				e.mCommunityGroupName = mCommGroupName;
				this.dispatchEvent(e);
			}
			
			/**
			 * 	Called when the user requests an event from the keyword graphic within the accordion component.
			 */
			private function accordionKeywordGraphicHandler(event:cAccordionKeywordGraphicEvent):void
			{
				if(event.mType == event.KEYWORD_CHECKED && mGraphControlPanel.enabled) {
					mSelectedKeywords.addItem(event.mKeywordName);
					mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
				}
				else if(event.mType == event.KEYWORD_UNCHECKED && mGraphControlPanel.enabled) {
					for(var i:int = 0; i < mSelectedKeywords.length; i++) {
						if(mSelectedKeywords.getItemAt(i).toString() == event.mKeywordName) {
							mSelectedKeywords.removeItemAt(i);
							mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
							return;
						}
					}
				}
			}
			
			/**
			 *  When user toggles between showing count and sentiment in the graph controls
			 */
			private function graphControlHandler(event:ItemClickEvent):void 
			{	
				// count
				if(event.currentTarget.selectedValue == "count")
				{
					mStatEvent.mCountWeight = 1;
					mStatEvent.mGoodnessWeight = 0;
					
					englishCheck.enabled = false;
				}
				// english proficiency
				else
				{
					mStatEvent.mCountWeight = 0;
					mStatEvent.mGoodnessWeight = 1;

					englishCheck.enabled = true;					
				}
					
				mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
			}

			
			/**
			 * 
			 */
			 /*
			private function countWeightSliderChangeHandler(event:Event):void
			{
				mCountInfoLabel.text = mCountWeightSlider.value.toString().slice(0, 5);
				mStatEvent.mCountWeight = mCountWeightSlider.value;
				mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
			}
			*/
			
			/**
			 * 
			 */
			 /*
			private function goodnessWeightSliderChangeHandler(event:Event):void
			{
				mGoodnessInfoLabel.text = mEnglishProficiencyWeightSlider.value.toString().slice(0, 5);
				mStatEvent.mGoodnessWeight = mEnglishProficiencyWeightSlider.value;
				mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
			}
			*/
			
			/**
			 *  When user toggles on and off english proficiency in the graph controls
			 */
			private function englishCheckHandler():void 
			{
				if(englishCheck.selected)  
					mStatEvent.mEnglishProficiency = 1;
				else
					mStatEvent.mEnglishProficiency = 0;
				           
				mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);    
			}

			
			/**
			 * 
			 */
			 /*
			private function proficiencyWeightSliderChangeHandler(event:Event):void
			{
				mEnglishProficiencyInfoLabel.text = mGoodnessWeightSlider.value.toString().slice(0, 5);
				mStatEvent.mEnglishProficiency = mGoodnessWeightSlider.value;
				mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
			}
			*/
			
			/**
			 * 
			 */
			/*
			private function presetsComboBoxChangeHandler(event:Event):void
			{
				if(mPresetsComboBox.selectedItem.toString() == "Count") {
					mCountWeightSlider.value = 1;
					mEnglishProficiencyWeightSlider.value = 0;
					mGoodnessWeightSlider.value = 0;
				}
				if(mPresetsComboBox.selectedItem.toString() == "Sentiment") {
					mCountWeightSlider.value = 0;
					mEnglishProficiencyWeightSlider.value = 0;
					mGoodnessWeightSlider.value = 1;
				}
				if(mPresetsComboBox.selectedItem.toString() == "English Prof.") {
					mCountWeightSlider.value = 0;
					mEnglishProficiencyWeightSlider.value = 1;
					mGoodnessWeightSlider.value = 0;
				}
				if(mPresetsComboBox.selectedItem.toString() == "Count + Sentiment") {
					mCountWeightSlider.value = 1;
					mEnglishProficiencyWeightSlider.value = 0;
					mGoodnessWeightSlider.value = 1;
				}
				if(mPresetsComboBox.selectedItem.toString() == "Count + English Prof.") {
					mCountWeightSlider.value = 1;
					mEnglishProficiencyWeightSlider.value = 1;
					mGoodnessWeightSlider.value = 0;
				}
				if(mPresetsComboBox.selectedItem.toString() == "Sentiment + English Prof.") {
					mCountWeightSlider.value = 0;
					mEnglishProficiencyWeightSlider.value = 1;
					mGoodnessWeightSlider.value = 1;
				}
				if(mPresetsComboBox.selectedItem.toString() == "Show All") {
					mCountWeightSlider.value = 1;
					mEnglishProficiencyWeightSlider.value = 1;
					mGoodnessWeightSlider.value = 1;
				}
				
				mCountInfoLabel.text = mCountWeightSlider.value.toString().slice(0, 5);
				mGoodnessInfoLabel.text = mEnglishProficiencyWeightSlider.value.toString().slice(0, 5);
				mEnglishProficiencyInfoLabel.text = mGoodnessWeightSlider.value.toString().slice(0, 5);
				
				mStatEvent.mCountWeight = mCountWeightSlider.value;
				mStatEvent.mGoodnessWeight = mEnglishProficiencyWeightSlider.value;
				mStatEvent.mEnglishProficiency = mGoodnessWeightSlider.value;
				
				mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
			}
			*/
			
			/**
			 * 	Called when the user clicks on the zoom in button.
			 */
			private function zoomInButtonClickHandler(event:Event):void
			{
				mLineChartCanvas.zoomIn();
			}
			
			/**
			 * 	Called when the user clicks on the zoom out button.
			 */
			private function zoomOutButtonClickHandler(event:Event):void
			{
				mLineChartCanvas.zoomOut();
			}
			 
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   MEMBER FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Updates the internal information of this object.
			 */
			public function updateInformation(commGroupName:String,
										      commGroupId:int,
										      creator:String,
										      dateCreated:String,
									     	  websites:ArrayCollection,
									     	  keywords:ArrayCollection,
									     	  canvasType:String):void
			{
				mCanvasType = canvasType;
				
				if(mCommGroupId != commGroupId) {
					mCommunityParserCollection.removeAll();
				}
				
				if(mStatOptionAccordion != null && mLineChartCanvas != null && mCommGroupName != commGroupName) {
					mStatOptionAccordion.disableAll();
					mLineChartCanvas.clearData();
				}
				
				mCommGroupName = commGroupName;
				mCommGroupId = commGroupId;
				mCreator = creator;
				mDateCreated = dateCreated;
				mWebsites = websites;
				mKeywords = keywords;
				
				for(var i:int = 0; i < mKeywords.length; i++) {
					var keywordEntry:cKeywordEntry = cKeywordEntry(mKeywords.getItemAt(i));
					mSelectedKeywords.addItem(keywordEntry.mName);
				}
				
				mCanvasType = canvasType;
				
				// tell the server to increment the view count for this community
				viewCountIncrementer.send({"communityId":mCommGroupId});
			}
			
			/**
			 * 	Updates the keyword collection for 
			 */
			public function updateKeywords(keywords:ArrayCollection):void
			{
				mKeywords = keywords;
				mStatOptionAccordion.updateInformation(mWebsites, mKeywords);
				//mAnalyticsParser.
				//mLineChartCanvas.updateInformation(mAnalyticsParser, mStatEvent, mSelectedKeywords);
			}
			
			/**
			 *	update the analytics information - called when new website statistics have been
			 * 	fetched. 
			 */
			public function updateAnalyticsInformation(analyticsParser:cAnalyticsParser):void
			{
				mCommunityParserCollection.addItem(analyticsParser);
				// 1. compute agregate
				
				
				// 2. update graphs
				
				var timeSpan:int = mStatEvent.TIME_SPAN_1_YEAR;
				
				if(mChartTimeSelectPanel.selectedIndex == 5)
					timeSpan = mStatEvent.TIME_SPAN_1_WEEK;
				else if(mChartTimeSelectPanel.selectedIndex == 4)
					timeSpan = mStatEvent.TIME_SPAN_2_WEEKS;
				else if(mChartTimeSelectPanel.selectedIndex == 3)
					timeSpan = mStatEvent.TIME_SPAN_1_MONTH;
				else if(mChartTimeSelectPanel.selectedIndex == 2)
					timeSpan = mStatEvent.TIME_SPAN_6_MONTHS;
				else if(mChartTimeSelectPanel.selectedIndex == 1)
					timeSpan = mStatEvent.TIME_SPAN_9_MONTHS;
				else
					timeSpan = mStatEvent.TIME_SPAN_1_YEAR;
					
				/*
				if(m1WeekSpanRadioButton.selected) {
					timeSpan = mStatEvent.TIME_SPAN_1_WEEK;
				}
				else if(m2WeeksTimeSpanRadioButton.selected) {
					timeSpan = mStatEvent.TIME_SPAN_2_WEEKS;
				}
				else if(m1MonthTimeSpanRadioButton.selected) {
					timeSpan = mStatEvent.TIME_SPAN_1_MONTH;
				}
				else if(m6MonthsTimeSpanRadioButton.selected) {
					timeSpan = mStatEvent.TIME_SPAN_6_MONTHS;
				}
				else if(m9MonthsTimeSpanRadioButton.selected) {
					timeSpan = mStatEvent.TIME_SPAN_9_MONTHS;
				}
				*/
				mStatEvent.mTimeSpan = timeSpan;
				
				// TODO: why did you set the mStatEvent things again? I thought they are set prior to calling this function.
				if(sentimentRadio.selected)
				{
					mStatEvent.mCountWeight = 0;
					mStatEvent.mGoodnessWeight = 1;
				}
				else
				{
					mStatEvent.mCountWeight = 1;
					mStatEvent.mGoodnessWeight = 0;
				}
				
				if(englishCheck.selected)
					mStatEvent.mEnglishProficiency = 1;
				else
					mStatEvent.mEnglishProficiency = 0;
				
				/*
				mStatEvent.mCountWeight = mCountWeightSlider.value;
				mStatEvent.mGoodnessWeight = mEnglishProficiencyWeightSlider.value;
				mStatEvent.mEnglishProficiency = mGoodnessWeightSlider.value;
				*/
				
				mLineChartCanvas.updateInformation(analyticsParser, mStatEvent, mSelectedKeywords);
				
				this.cursorManager.removeBusyCursor();
				mStatOptionAccordion.enabled = true;
				mGraphControlPanel.enabled = true;
				mChartTimeSelectPanel.enabled = true;
				
				// REMOVE THIS LATER
				mAnalyticsParser = analyticsParser;
					
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   CANVAS EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * Called when the canvas is created.
			 */
			private function creationCompleteHandler(event:Event):void
			{
				if(mCommGroupName.length == 0) {
					mCommunityGroupNameLabel.text = "[Community Group Name Not Available]";
				}
				else {
					mCommunityGroupNameLabel.text = mCommGroupName;
				}
				
				// default to showing count first
				countRadio.selected = true;
				englishCheck.selected = false;
				
				/*
				mCountWeightSlider.value = 1;
				mEnglishProficiencyWeightSlider.value = 0;
				mGoodnessWeightSlider.value = 0;
				mCountInfoLabel.text = mCountWeightSlider.value.toString().slice(0, 5);
				mGoodnessInfoLabel.text = mEnglishProficiencyWeightSlider.value.toString().slice(0, 5);
				mEnglishProficiencyInfoLabel.text = mGoodnessWeightSlider.value.toString().slice(0, 5);
				*/
				
				mGraphControlPanel.enabled = false;
				mChartTimeSelectPanel.enabled = false;
			}
			
			/**
			 * 	Called when the canvas is shown.
			 */
			private function showCanvasHandler(event:Event):void
			{
				if(mCommGroupName.length == 0) {
					mCommunityGroupNameLabel.text = "[Community Group Name Not Available]";
				}
				else {
					mCommunityGroupNameLabel.text = mCommGroupName;
				}
				mStatOptionAccordion.updateInformation(mWebsites, mKeywords);
		
				// hide certain components if mCanvasType is ALL_COMMUNITY
				if((new cCommunityGroupSelectionCanvas()).OTHER_COMMUNITY == mCanvasType) {
					mEditCommunityGroupButton.visible = false;
					mAddWebsiteButton.visible = false;
					mCommunityGroupLabel.label = "Other Community Group";
				}	
				else {
					mEditCommunityGroupButton.visible = true;
					mAddWebsiteButton.visible = true;
					mCommunityGroupLabel.label = "My Community Group";
				}
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   DATA MEMBERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			// community group name
			private var mCommGroupName:String = "";
			// community group id
			private var mCommGroupId:int = 0;
			// creator of the community
			private var mCreator:String = "";
			// date community group was created
			private var mDateCreated:String = "";
			// websites for the community
			private var mWebsites:ArrayCollection = null;
			// keywords for the community
			private var mKeywords:ArrayCollection = null;
			// keywords selected by user
			private var mSelectedKeywords:ArrayCollection = new ArrayCollection();
			// collection of website parsers for a community
			private var mCommunityParserCollection:ArrayCollection = new ArrayCollection();
			// the type of canvas to display : either MY_COMMUNITY or ALL_COMMUNITY
			public var mCanvasType:String = "";	
			
			private var mAnalyticsParser:cAnalyticsParser = null;
			private var mStatEvent:cStatOptionSelectedEvent = new cStatOptionSelectedEvent("dummy");
			
			[Bindable]
			private var SERVER_URL:String = Constants.SERVER_URL+"monarch/Client/";	
			
		]]>
	</mx:Script>
	<mx:HTTPService id="viewCountIncrementer" method="GET" url="{SERVER_URL}communityIncrementView.php" result="viewCountHandler(event)" />
	<mx:LinkButton click="homeLabelClickHandler(event)" label="Home" id="mHomeLabel" x="12" y="5"/>
	<mx:Label x="72" y="3" text="&gt;" styleName="breadCrumbSeparator" />
	<mx:LinkButton click="communityLabelClickHandler(event)" label="My Community Groups" id="mCommunityGroupLabel"  horizontalCenter="-339" verticalCenter="-291" />
	<mx:Label x="251" y="4" text="&gt;" styleName="breadCrumbSeparator" />
	<mx:Label text="Some Community Group Name" id="mCommunityGroupNameLabel" styleName="pageTitle"  x="279" y="4"/>
	<mx:ViewStack x="187" y="45.55" id="mStatGraphicsViewStack" width="815" height="529.45">
		<ns1:cLineChartCanvas x="1" y="2" id="mLineChartCanvas" creationComplete="lineChartCanvasCreateHandler(event)">
		</ns1:cLineChartCanvas>
		<mx:Canvas label="1 year" width="100%" height="100%">
		</mx:Canvas>
	</mx:ViewStack>
	<ns1:cStatOptionsAccordion id="mStatOptionAccordion"
							   AccordionWebsiteGraphicEvent="accordionWebsiteGraphicEventHandler(event)"
							   AccordionKeywordGraphicEvent="accordionKeywordGraphicHandler(event)"
							   height="441" horizontalCenter="-412" verticalCenter="-45">
	</ns1:cStatOptionsAccordion>
	<mx:Button useHandCursor="true" buttonMode="true" mouseChildren="false" label="Add Website" click="addWebsiteClickHandler(event)" id="mAddWebsiteButton" styleName="buttonBlack"  x="897" y="4" icon="@Embed(source='../images/application_add.png')"/>
	<mx:Button useHandCursor="true" buttonMode="true" mouseChildren="false" label="Edit Community Group" click="editCommunityGroupButtonClickHandler(event)" id="mEditCommunityGroupButton" styleName="buttonBlack"  x="723" y="4" icon="@Embed(source='../images/pencil.png')"/>
	<mx:Panel layout="absolute" height="117" y="491" x="9" width="172" title="graph controls" verticalScrollPolicy="off" horizontalScrollPolicy="off" id="mGraphControlPanel" toolTip="This panel allows you to control weights of how to gauge a keyword or link's hotness.">
		<mx:VBox x="10" y="2">
			<mx:RadioButtonGroup id="graphControl" itemClick="graphControlHandler(event)"/>
			<mx:RadioButton 
				groupName="graphControl" 
				id="countRadio"
				label="count"
				toolTip="How many times this keyword or link has been mentioned."/>
			<mx:RadioButton 
				groupName="graphControl" 
				id="sentimentRadio"
				label="sentiment"
				toolTip="The level of approval of the keyword or link. Do people hate or love it?"/>
			<mx:CheckBox 
				id="englishCheck" 
				label="english proficiency" 
				click="englishCheckHandler()"
				toolTip="When this keyword or link was said, how good was the speaker's English? Check this if you want more weight for more careful prose."/>
        </mx:VBox>
		<!--
		<mx:HSlider x="8" y="55" change="countWeightSliderChangeHandler(event)" width="149" minimum="0" maximum="1" allowTrackClick="true" liveDragging="true" value="1" enabled="true" id="mCountWeightSlider"/>
		<mx:HSlider x="8" y="135" change="goodnessWeightSliderChangeHandler(event)" width="149" minimum="0" maximum="1" allowTrackClick="true" liveDragging="true" value="1" enabled="true" id="mEnglishProficiencyWeightSlider"/>
		<mx:HSlider x="8" y="95" change="proficiencyWeightSliderChangeHandler(event)" width="149" allowTrackClick="true" minimum="0" maximum="1" liveDragging="true" value="1" enabled="true" id="mGoodnessWeightSlider"/>
		<mx:Label x="8" y="41" text="Count:" enabled="true" id="mCountWeightLabel" toolTip="How many times this keyword or link has been mentioned."/>
		<mx:Label x="8" y="81" text="Sentiment:" enabled="true" id="mGoodnessWeightLabel" toolTip="The level of approval of the keyword or link. Do people hate or love it?" />
		<mx:Label x="8" y="121" text="English Proficiency:" enabled="true" id="mProficiencyWeightLabel0" toolTip="When this keyword or link was said, how good was the speaker's English? Slide this higher if you want more weight for more carefule prose."/>
		<mx:ComboBox id="mPresetsComboBox" change="presetsComboBoxChangeHandler(event)" x="8" y="5" width="152" maxWidth="160" toolTip="presets that automatically set the sliders below">
			<mx:ArrayCollection>
				 <mx:String>Count</mx:String>
				 <mx:String>Sentiment</mx:String>
				 <mx:String>English Prof.</mx:String>
				 <mx:String>Count + Sentiment</mx:String>
				 <mx:String>Count + English Prof.</mx:String>
				 <mx:String>Sentiment + English Prof.</mx:String>
				 <mx:String>Show All</mx:String>
	    	</mx:ArrayCollection>
		</mx:ComboBox>
		<mx:Label x="112" y="41" text="Label" textAlign="right" id="mCountInfoLabel" width="40" selectable="false"/>
		<mx:Label x="132" y="121" text="Label" textAlign="right" id="mGoodnessInfoLabel"/>
		<mx:Label x="132" y="81" text="Label" textAlign="right" id="mEnglishProficiencyInfoLabel"/>
		-->
	</mx:Panel>
	<mx:Button useHandCursor="true" buttonMode="true" mouseChildren="false" x="199" y="585" label="Zoom In" click="zoomInButtonClickHandler(event)" id="mZoomInButton" width="24" height="24" icon="@Embed(source='../images/magnifier_zoom_in.png')" toolTip="zoom in"/>
	<mx:Button useHandCursor="true" buttonMode="true" mouseChildren="false" x="227" y="585" label="Zoom Out" click="zoomOutButtonClickHandler(event)" id="mZoomOutButton" width="24" height="24" icon="@Embed(source='../images/magnifier_zoom_out.png')" toolTip="zoom out" />

	<mx:ToggleButtonBar x="567" y="581" itemClick="changeTimeSpan(event);" selectedIndex="5" id="mChartTimeSelectPanel" toolTip="Adjust how far back the stats you want to see">
		<mx:dataProvider>
		       <mx:Array>
		           <mx:String>1 year</mx:String>
		           <mx:String>9 months</mx:String>
		           <mx:String>6 months</mx:String>
		           <mx:String>1 month</mx:String>
		           <mx:String>2 weeks</mx:String>
		           <mx:String>1 week</mx:String>
		       </mx:Array>
		   </mx:dataProvider>
	</mx:ToggleButtonBar>

	
</mx:Canvas>
