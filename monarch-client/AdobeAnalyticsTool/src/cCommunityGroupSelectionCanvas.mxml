<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" hide="hideCanvasHandler(event)" width="1013" height="615">
	
	<mx:Metadata>
		[Event(name="OpenCreateCommunityGroupCanvasEvent", type="flash.events.Event")]
		[Event(name="OpenCommunityGroupBrowserCanvasEvent", type="cCommGroupGraphicClickedEvent")]
		[Event(name="OpenCommunityGroupHomeCanvasEvent", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.effects.Fade;
			import mx.effects.Move;
			import mx.effects.Tween;
			import mx.rpc.http.HTTPService;
			
			public var MY_COMMUNITY:String = "myCommunity";
			public var OTHER_COMMUNITY:String = "otherCommunity";
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							GUI EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Fires an event signaling that the user has clicked the create
			 *  community group label. Used only when type is MY_COMMUNITY.
			 */
			private function createCommClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCreateCommunityGroupCanvasEvent");
				this.dispatchEvent(e);
			}
			
			/**
			 * 	Fires an event signaling that the user has clicked the home label.
			 */
			private function homeLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupHomeCanvasEvent");
				this.dispatchEvent(e);
			}		
			
			/**
			 *  Event handler called when the user clicks on the community group graphic whithin this canvas.
			 * 	Fires an event signaling that a community has been selected by the user.
			 */
			private function commGroupGraphicClickedHandler(event:cCommGroupGraphicClickedEvent):void
			{
				var i:int
				var communityGroupEntry:cCommunityGroupEntry;
				var communities:ArrayCollection = mUserAccountInformation.mCommunities;
				if(mCanvasType == (new cCommunityGroupSelectionCanvas()).OTHER_COMMUNITY) {
					communities = mUserAccountInformation.mOtherCommunities;
				}
				for(i = 0; i < communities.length; i++) {
					communityGroupEntry = cCommunityGroupEntry(communities.getItemAt(i));
					if(communityGroupEntry.mId == event.mCommGroupId) {
						var e:cCommGroupGraphicClickedEvent = new cCommGroupGraphicClickedEvent("OpenCommunityGroupBrowserCanvasEvent");
						e.mCommGroupName = event.mCommGroupName;
						e.mCommGroupId = event.mCommGroupId;
						e.mCreator = mUserAccountInformation.mUserName;
						e.mTime = event.mTime;
						e.mWebsites = communityGroupEntry.mWebsites;
						e.mKeywords = communityGroupEntry.mKeywords;
						e.mCanvasType = mCanvasType;

						this.dispatchEvent(e);
						return;
					}
				}
			}
			
			// shows the newest community groups 
			private function newestCommunities(event:Event):void
			{
				mNewestButton.enabled = false;
				mMostViewedButton.enabled = true;
				mAlphabeticalButton.enabled = true;
				
				/* Reorder communities using new criteria and re-show them */
				sortCommunities(newestSortFunction) ;
				showCommunities();
			}
			
			// shows the most viewed community groups
			private function mostViewedCommunities(event:Event):void
			{
				mNewestButton.enabled = true;
				mMostViewedButton.enabled = false;
				mAlphabeticalButton.enabled = true;

				/* Reorder communities using new criteria and re-show them */
				sortCommunities(mostViewedSortFunction) ;
				showCommunities();
			}
			
			// shows the community groups in alphabetical order
			private function alphabeticalCommunities(event:Event):void
			{
				mNewestButton.enabled = true;
				mMostViewedButton.enabled = true;
				mAlphabeticalButton.enabled = false;
				
				/* Reorder communities using new criteria and re-show them */
				sortCommunities(alphabeticalSortFunction);
				showCommunities();
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							CANVAS EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Event handler called when this canvas closes.
			 */
			private function hideCanvasHandler(event:Event):void
			{
				if(!mRemoveCommGroupLabelEnabled) {
					mRemoveCommGroupLabelEnabled = true;
				}
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							 MEMBER FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 *  Function which updates the users information within this canvas component to be used
			 *  at a later time. Also displays the graphics for this canvas component.
			 */
			public function updateInformation(userAccountInformation:cAccountInformation,
											  canvasType:String):void
			{
				
				// Initialize canvas type
				mCanvasType = canvasType;
				if(canvasType == this.OTHER_COMMUNITY) {
					mCreateCommButton.visible = false;
					mHomeLoggedOutAccountLabel.text = "Other Community Groups";
				}

				mUserAccountInformation = userAccountInformation;
				
				mMyCommVBox.removeAllChildren();
				var i:int;
				var communityGroupEntry:cCommunityGroupEntry;
				var communities:ArrayCollection = userAccountInformation.mCommunities;
				if(canvasType == (new cCommunityGroupSelectionCanvas()).OTHER_COMMUNITY) {
					communities = userAccountInformation.mOtherCommunities;
				}
				trace("Selection update : "+communities.length);
				mCommunityGraphicList = new Array();
				
				// To start, order communities by newness
				communities.source.sort(newestSortFunction);
				 
				for(i = 0; i < communities.length; i++) {
					var commGroupGraphicEntry:cCommGroupLargeGraphic = new cCommGroupLargeGraphic();
					mCommunityGraphicList.push(commGroupGraphicEntry);
					commGroupGraphicEntry.addEventListener("cCommGroupGraphicClickedEvent", commGroupGraphicClickedHandler);
					var justCreated:Boolean = false;
					
												
					mMyCommVBox.addChild(commGroupGraphicEntry);
				}	
				showCommunities();
				
			}
			
			/*
			 * Populates the community graphic entries using the ordering of the member communities array
			 */
			private function showCommunities():void {
				var justCreated:Boolean;
				var communities:ArrayCollection;
				
				if(mCanvasType == (new cCommunityGroupSelectionCanvas()).OTHER_COMMUNITY) {
					communities = mUserAccountInformation.mOtherCommunities;
				}
				else {
				    communities = mUserAccountInformation.mCommunities;
				}
				
				trace("CommLength = "+communities.length);
				for(var i:int = 0; i < communities.length; i++) {
					var communityGroupEntry:cCommunityGroupEntry = cCommunityGroupEntry(communities.getItemAt(i));
										
					/* I'm not sure what this is doing: RFC */
					if(communityGroupEntry.mJustCreated) {
						justCreated = true;
						communityGroupEntry.mJustCreated = false;
					}
					else {
						justCreated = false;
					}
					mCommunityGraphicList[i].updateInformation(communityGroupEntry.mName,
															communityGroupEntry.mCommunityGroupCreator,
															communityGroupEntry.mCreatedTime.toString(),
															communityGroupEntry.mWebsites.length.toString(),
															communityGroupEntry.mId,
															justCreated);	
				}
			}
			
			/*
			 *
			 */
			public function sortCommunities(sortFunction:Object):void 
			{
				mUserAccountInformation.mCommunities.source.sort(sortFunction);	
			}
			
			
			/**
			 *
			 */
			public function updateCanvasTypeInformation(canvasType:String):void {
				
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							   DATA MEMBERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			// reference to the users community group information object
			private var mUserAccountInformation:cAccountInformation = null;
			
			// variable used to enable and disable the remove website label
			private var mRemoveCommGroupLabelEnabled:Boolean = true;
			
			private var SERVER_URL:String =Constants.SERVER_URL+"monarch/Client/";
			
			// the type of canvas to display : either MY_COMMUNITY or ALL_COMMUNITY
			public var mCanvasType:String = "";	
			
			private var mCommunityGraphicList:Array;
			
			// Sort functions
			private var alphabeticalSortFunction:Object = 
					function (a:Object,b:Object):int 
					{ 
						return a.mName.localeCompare(b.mName); 
					};		
					
			private var newestSortFunction:Object =
					function (a:Object,b:Object):int
					{
						return b.mCreatedTime - a.mCreatedTime;
					};
			
			private var mostViewedSortFunction:Object =
					function (a:Object,b:Object):int
					{
						return b.mAccesses - a.mAccesses;
					};
		]]>
	</mx:Script>
	<mx:Label text="My Community Groups" id="mHomeLoggedOutAccountLabel" styleName="pageTitle"  x="90" y="4"/>
	<mx:VBox height="513" width="390" id="mMyCommVBox" verticalScrollPolicy="off" x="312" y="62">
	</mx:VBox>
	<mx:LinkButton label="Home" styleName="breadCrumb" click="homeLabelClickHandler(event)" horizontalCenter="-473" verticalCenter="-291" id="mHomeButton"/>
	<mx:Button useHandCursor="true" buttonMode="true" mouseChildren="false" label="Create Community Group" click="createCommClickHandler(event)" id="mCreateCommButton" verticalCenter="-292" horizontalCenter="412" styleName="buttonBlack">
		<mx:icon>@Embed(source='../images/application_cascade.png')</mx:icon>
	</mx:Button>
	<mx:Button useHandCursor="true" buttonMode="true" mouseChildren="false" label="Next &#187;" horizontalCenter="158" verticalCenter="286" id="mNextCommButton" enabled="false"/>
	<mx:Button useHandCursor="true" buttonMode="true" mouseChildren="false" label="&#171; Previous" horizontalCenter="-146" verticalCenter="286" id="mPreviousCommButton" enabled="false"/>
	<mx:Button useHandCursor="true" buttonMode="true" mouseChildren="false" label="Newest" click="newestCommunities(event)" width="120" id="mNewestButton" horizontalCenter="-134" verticalCenter="-261" icon="@Embed(source='../images/clock.png')" enabled="false"/>
	<mx:Button useHandCursor="true" buttonMode="true" mouseChildren="false" label="Most Viewed" click="mostViewedCommunities(event)" width="120" id="mMostViewedButton" horizontalCenter="-2" verticalCenter="-261" icon="@Embed(source='../images/eye.png')"/>
	<mx:Button useHandCursor="true" buttonMode="true" mouseChildren="false" label="Alphabetical" click="alphabeticalCommunities(event)" width="120" id="mAlphabeticalButton" horizontalCenter="134" verticalCenter="-261" icon="@Embed(source='../images/text_uppercase.png')"/>
	<mx:VRule height="20" horizontalCenter="-69" verticalCenter="-262" />
	<mx:VRule height="20" horizontalCenter="67" verticalCenter="-262" />
	<mx:Label x="67" y="4" text="&gt;" styleName="breadCrumbSeparator"/>
</mx:Canvas>
