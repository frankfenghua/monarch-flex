<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="showCanvasHandler(event)" show="showCanvasHandler(event)" width="1012" height="616">

	<mx:Metadata>
		[Event(name="OpenCommunityGroupSelectionClickedEvent", type="flash.events.Event")]
		[Event(name="OpenCommunityGroupHomeCanvasEvent",       type="flash.events.Event")]
		[Event(name="OpenCommunityGroupBrowserCanvasEvent",    type="flash.events.Event")]
		[Event(name="OpenRegExCanvasEvent",                    type="cEditWebsiteEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
//			import mx.collections.XMLListCollection;
			import mx.collections.ArrayCollection;
		
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
            
//            [Bindable]
//            private var keywords:XML;
            // =
            //  <root value="root"> 
//              	<root2 value="root2"> 
//		      	</root2>                                          
            //  </root>;
            
            // [Bindable]
            // private var keywordsTree:XMLListCollection; //  = new XMLListCollection(keywords);
		
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			// ================================================================================
			// treeLabel
			//    args:  an XML node
			//    ret:   the text that should be displayed in the tree component
			//    about: Tells Flex how to convert the XML into a textual tree.
			// -------------------------------------------------------------------------------- 
			private function treeLabel(item:Object):String
            {
            	if(item.@label != "") {
            		if(item.@rating != "") {
            			return item.@label + " " + item.@rating;
            		}
            		else {
            			// trace("Item label = "+item.@label);
            			return item.@label;
            		}
            	}
            	else {
					return item.name();
            	}
            }
/*            
            // ================================================================================
			// addKeyword
			//    args:  a keyword from the server response
			//    ret:   none
			//    about: Adds the keyword to the tree component along with its subtree.
			// --------------------------------------------------------------------------------
            private function addKeyword(keyword:Object):void
            {
            	var keywordNode:XML = <keyword/>;
				keywordNode.@value = keyword.word;
				var rootNode:XMLList = keywords.root;
				rootNode.appendChild(keywordNode);
				
				addKeywordThreads("love threads", keywordNode, keyword.loveThreads);
				addKeywordThreads("hate threads", keywordNode, keyword.hateThreads);
				addKeywordThreads("hot threads", keywordNode, keyword.hotThreads);
				addKeywordSayers("ass kissers", keywordNode, keyword.assKissers);
				addKeywordSayers("trash talkers", keywordNode, keyword.trashTalkers);
				addKeywordSayers("chatterboxes", keywordNode, keyword.chatterboxes);
				addKeywordSayers("sophisticated orators", keywordNode, keyword.sophisticatedOrators);
            }
            
            // ================================================================================
			// addKeywordThreads
			//    args:  * what this group of threads feels about the keyword
			//           * a keyword on the tree
			//           * a grouping of threads from the server response
			//    ret:   none
			//    about: Adds a group of threads.
			// --------------------------------------------------------------------------------
            private function addKeywordThreads(feeling:String, keywordNode:XML, threadList:Object):void
            {
            	var feelingNode:XML = <keywordFeeling/>;
				feelingNode.@value = feeling;
				keywordNode.appendChild(feelingNode);
				
				addThreads(feelingNode, threadList);
            }
            
            // ================================================================================
			// addThreads
			//    args:  * the grouping of threads on the tree
			//           * the grouping of threads from the server response
			//    ret:   none
			//    about: Adds all threads under a grouping of threads.
			// --------------------------------------------------------------------------------
            private function addThreads(threadListNode:XML, threadList:Object):void
            {
            	var threads:ArrayCollection = threadList.thread;
            	
            	for(var i:int = 0; i < threads.length; i++)
            	{
            		var threadNode:XML = <thread/>;
            		threadNode.@value = threads.getItemAt(i).rating + " " + threads.getItemAt(i).title;
            		threadListNode.appendChild(threadNode);
            	}
            }
            
            // ================================================================================
			// addKeywordSayers
			//    args:  * what this group of users feels about the keyword
			//           * a keyword on the tree
			//           * a grouping of users from the server response
			//    ret:   none
			//    about: Adds a group of users.
			// --------------------------------------------------------------------------------
            private function addKeywordSayers(feeling:String, keywordNode:XML, userList:Object):void
            {
            	var feelingNode:XML = <userFeeling/>;
				feelingNode.@value = feeling;
				keywordNode.appendChild(feelingNode);
				
				addUsers(feelingNode, userList);
            }
            
            // ================================================================================
			// addThreads
			//    args:  * the grouping of users on the tree
			//           * the grouping of users from the server response
			//    ret:   none
			//    about: Adds all users under a grouping of users.
			// --------------------------------------------------------------------------------
            private function addUsers(userListNode:XML, userList:Object):void
            {
            	var users:ArrayCollection = userList.user;
            	
            	for(var i:int = 0; i < users.length; i++)
            	{
            		var userNode:XML = <user/>;
            		userNode.@value = users.getItemAt(i).rating + " " + users.getItemAt(i).name;
            		userListNode.appendChild(userNode);
            	}
            }
*/			
			/**
			 * Called when the stat request returns
			 */
			private function statResultHandler(event:ResultEvent):void  
			{
				// var words:ArrayCollection = event.result.detailStats.keywords.keyword;
				// keywordsTree = new XMLListCollection(event.result.keywords);
				// trace(event.result);
				// trace(event.result);
				var i:int;
				
				// for(i = 0; i < words.length; i++)
				// 	addKeyword(words.getItemAt(i));
				
				/*
				// addKeyword("fucker");
				
				var i:int = 0; // used as counter in this function
				trace("Load succeeded");
				// Assign to bound variables to implicitly change the text
				numberOfUsers = event.result.detailStats.general.numberUsers;
				postsPerDay = event.result.detailStats.general.postsPerDay;
				postsToday = event.result.detailStats.general.postsToday;
				analyzedPosts = event.result.detailStats.general.analyzedPosts;
				analyzedThreads = event.result.detailStats.general.analyzedThreads;
				
				// May be arbitrarily many chatterboxes, veterans, etc. so loop through them
				// Set chatterboxes HTML
				var tempString:String = "";
				var chatterboxes:ArrayCollection = event.result.detailStats.general.chatterboxes.user;
				for(i = 0; i < chatterboxes.length; i++) {
					tempString += "<a href=\""+chatterboxes.getItemAt(i).url+"\">"+chatterboxes.getItemAt(i).title+"</a> Rating="+chatterboxes.getItemAt(i).rating+"\n";
				}
				chatterboxesHTML = tempString;
				
				// Set newbies HTML
				tempString = "";
				var newbies:ArrayCollection = event.result.detailStats.general.newbies.user;
				for(i = 0; i < newbies.length; i++) {
					tempString += "<a href=\""+newbies.getItemAt(i).url+"\">"+newbies.getItemAt(i).title+"</a> Rating="+newbies.getItemAt(i).rating+"\n";
				}
				newbiesHTML = tempString;
				
				// Set veterans HTML
				tempString = "";
				var veterans:ArrayCollection = event.result.detailStats.general.veterans.user;
				for(i = 0; i < veterans.length; i++) {
					tempString += "<a href=\""+veterans.getItemAt(i).url+"\">"+veterans.getItemAt(i).title+"</a> Rating="+veterans.getItemAt(i).rating+"\n";
				}
				veteransHTML = tempString;
				
				// Set lively threads HTML
				tempString = "";
				var livelyThreads:ArrayCollection = event.result.detailStats.general.livelyThreads.thread;
				trace(livelyThreads);
				for(i = 0; i < livelyThreads.length; i++) {
					tempString += "<a href=\""+livelyThreads.getItemAt(i).url+"\">"+livelyThreads.getItemAt(i).title+"</a> Rating="+livelyThreads.getItemAt(i).rating+"\n";
				}
				livelyThreadsHTML = tempString;
				
				
				// Set keywords HTML
				tempString = "";
				var keywords:ArrayCollection = event.result.detailStats.keywords.keyword;
				for(i = 0; i < keywords.length; i++) {
					// Print word
					var j:int = 0;
					tempString += keywords.getItemAt(i).word + "\n";
					trace("Keyword "+i+" of "+keywords.length);
					
					tempString += "Favorable threads:";
					var loveThreads:ArrayCollection = keywords.getItemAt(i).loveThreads.thread;
					for(j = 0; j < loveThreads.length; j++) {
						tempString += "<a href=\""+loveThreads.getItemAt(j).url+"\">"+loveThreads.getItemAt(j).title+"</a> Rating="+loveThreads.getItemAt(j).rating+"\n";
					}
					
					tempString += "Unfavorable threads:";
					var hateThreads:ArrayCollection = keywords.getItemAt(i).hateThreads.thread;
					for(j = 0; j < hateThreads.length; j++) {
						tempString += "<a href=\""+hateThreads.getItemAt(j).url+"\">"+hateThreads.getItemAt(j).title+"</a> Rating="+hateThreads.getItemAt(j).rating+"\n";
					}
					
					tempString += "Hot threads:";
					var hotThreads:ArrayCollection = keywords.getItemAt(i).hotThreads.thread;
					for(j = 0; j < hotThreads.length; j++) {
						tempString += "<a href=\""+hotThreads.getItemAt(j).url+"\">"+hotThreads.getItemAt(j).title+"</a> Rating="+hotThreads.getItemAt(j).rating+"\n";
					}
					
					tempString += "Ass kissers:";
					var assKissers:ArrayCollection = keywords.getItemAt(i).assKissers.user;
					for(j = 0; j < assKissers.length; j++) {
						tempString += "<a href=\""+assKissers.getItemAt(j).url+"\">"+assKissers.getItemAt(j).title+"</a> Rating="+assKissers.getItemAt(j).rating+"\n";
					}
					
					tempString += "Trash talkers:";
					var trashTalkers:ArrayCollection = keywords.getItemAt(i).trashTalkers.user;
					for(j = 0; j < trashTalkers.length; j++) {
						tempString += "<a href=\""+trashTalkers.getItemAt(j).url+"\">"+trashTalkers.getItemAt(j).title+"</a> Rating="+trashTalkers.getItemAt(j).rating+"\n";
					}
					
					tempString += "Chatterboxes:";
					var kChatterboxes:ArrayCollection = keywords.getItemAt(i).chatterboxes.user;
					for(j = 0; j < kChatterboxes.length; j++) {
						tempString += "<a href=\""+kChatterboxes.getItemAt(j).url+"\">"+kChatterboxes.getItemAt(j).title+"</a> Rating="+kChatterboxes.getItemAt(j).rating+"\n";
					}
					
					tempString += "Sophisticated orators:";
					var sophisticatedOrators:ArrayCollection = keywords.getItemAt(i).sophisticatedOrators.user;
					for(j = 0; j < sophisticatedOrators.length; j++) {
						tempString += "<a href=\""+sophisticatedOrators.getItemAt(j).url+"\">"+sophisticatedOrators.getItemAt(j).title+"</a> Rating="+sophisticatedOrators.getItemAt(j).rating+"\n";
					}
					
				}
				trace(tempString.length);
				keywordsHTML = tempString;
				*/	
			}
		
			/**
			 * 	Called when the user clicks on the home label.
			 */
			private function homeLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupHomeCanvasEvent");
				this.dispatchEvent(e);
			}
					
			/**
			 * 	Called when the user clicks on the community label.
			 */
			private function communityLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupSelectionClickedEvent");
				this.dispatchEvent(e);
			}
			
			
			/**
			 * 	Called when the user clicks on the community group name label.
			 */
			private function communityNameLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupBrowserCanvasEvent");
				this.dispatchEvent(e);
			}
			
			/**
			 * 	Called when the user clicks on the edit website button.
			 */
			private function editWebsiteButtonClickHandler(event:Event):void
			{
				var e:cEditWebsiteEvent = new cEditWebsiteEvent("OpenRegExCanvasEvent");
				e.mWebsiteName = mWebsiteName;
				e.mCommunityGroupName = mCommunityGroupName;
				this.dispatchEvent(e);
			}
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   CANVAS EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Called when the canvas is displayed.
			 */
			private function showCanvasHandler(event:Event):void
			{
				mCommunityGroupNameLabel.label = mCommunityGroupName;
				mWebsiteNameLabel.text = mWebsiteName;
				mCommunityGroupNameLabel.x =+ mSep2.x + mSep2.measureText(mSep2.text).width + 10;
				mSep3.x =+ mCommunityGroupNameLabel.x + mCommunityGroupNameLabel.width + 10;
				mWebsiteNameLabel.x =+ mSep3.x + mSep3.measureText(mSep3.text).width + 10;
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   MEMBER FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Updates the internal information of this object.
			 */
			public function updateInformation(websiteName:String,
											  communityName:String):void
			{
				mCommunityGroupName = communityName;
				mWebsiteName = websiteName;	
				
				// Send a request to the server for stats for this object
				trace("Sent stats request");
				statRequester.send({"websiteName":mWebsiteName});
			}
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   DATA MEMBERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			// name of the community group
			private var mCommunityGroupName:String = "";
			// name of the website 
			private var mWebsiteName:String = "";
			
			private var mStatsArray:ArrayCollection;
			
			[Bindable]
			private var numberOfUsers:int = 0;
			
			[Bindable]
			private var postsPerDay:Number = 0;
			
			[Bindable]
			private var postsToday:int = 0;
			
			[Bindable]
			private var analyzedPosts:int = 0;
			
			[Bindable]
			private var analyzedThreads:int = 0;
	
			[Bindable]
			private var chatterboxesHTML:String = "";
			
			[Bindable]		
			private var newbiesHTML:String = "";
			
			[Bindable]
			private var veteransHTML:String = "";
			
			[Bindable]
			private var livelyThreadsHTML:String = "";
			
			[Bindable]
			private var keywordsHTML:String = "";
			
			[Bindable]
			private var SERVER_URL:String = "http://csil-srprj-2.cs.uiuc.edu/monarch/Client/";	
			
		]]>
	</mx:Script>
	<mx:XMLListCollection id="keywordsTree" source="{statRequester.lastResult.keywords.keyword}"/>
	<mx:HTTPService id="statRequester" method="GET" url="{SERVER_URL}detailStats.php" result="statResultHandler(event)" resultFormat="e4x"/>
	<mx:LinkButton click="homeLabelClickHandler(event)" label="Home" id="mHomeLabel" top="2" left="0" />
	<mx:LinkButton click="communityLabelClickHandler(event)" label="My Community Groups" id="mCommunityGroupLabel" top="1" left="79" />
	<mx:LinkButton click="communityNameLabelClickHandler(event)" id="mCommunityGroupNameLabel" top="2" left="267" />
	<mx:Label text="Website Name" id="mWebsiteNameLabel" styleName="pageTitle"  top="1" left="358.5"/>
	<mx:Label text="&gt;" styleName="breadCrumbSeparator"  top="-1" left="58" id="mSep1"/>
	<mx:Label text="&gt;" styleName="breadCrumbSeparator"  top="-1" left="240" id="mSep2"/>
	<mx:Label text="&gt;" styleName="breadCrumbSeparator"  id="mSep3" top="0" left="335"/>
	<mx:Button useHandCursor="true" buttonMode="true" mouseChildren="false" label="Edit Website" styleName="buttonBlack" click="editWebsiteButtonClickHandler(event)" id="mEditWebsiteButton" horizontalCenter="447" verticalCenter="-293" fontWeight="bold" fontStyle="normal" cornerRadius="5" icon="@Embed(source='../images/pencil.png')"/>
	<mx:Panel x="6" y="50" width="494.5" height="349" layout="absolute" title="General">
		<mx:Text x="0" y="0" width="480.5" height="308"
			htmlText="Number of Users: {numberOfUsers}&#xa;
				  Posts per day: {postsPerDay}&#xa;
				  Posts today: {postsToday}&#xa; 
				  Total posts analyzed: {analyzedPosts}&#xa; 
				  Total threads analyzed: {analyzedThreads}&#xa;
				  Chatterboxes: {chatterboxesHTML}
				  Newbies: {newbiesHTML}
				  Veterans: {veteransHTML}
				  Lively threads: {livelyThreadsHTML}"/>
	</mx:Panel>
	<mx:Panel x="6" y="407" width="494.5" height="200" layout="absolute" title="Links Spoken">
		<mx:Text x="5" y="10">
		    <mx:htmlText>
                <![CDATA[Most mentioned: <a href="http://fuck.com">Fuck.com</a><br /> (99123)&#xa;Least mentioned: hoe.com (4)&#xa;Most favorable: shit.com (+56.2)&#xa;Least favorable: damn.com (-12.5)&#xa;Spoken with bad English: bitch.com (-0.82)&#xa;Spoken with best English: nigger.com (0.99)"]]>
            </mx:htmlText>
        </mx:Text>
	</mx:Panel>
	<mx:Panel x="508" y="50" width="494" height="556" layout="absolute" title="Keywords">
		<mx:Tree id="tree" top="10" left="10" dataProvider="{keywordsTree}" labelFunction="treeLabel" width="470" height="505" showRoot="true" dataTipField="word"/>
	</mx:Panel>
	
</mx:Canvas>
