<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" hide="canvasHideHandler(event)" creationComplete="showCanvasHandler(event)" show="showCanvasHandler(event)" width="1012" height="616">

	<mx:Metadata>
		[Event(name="OpenCommunityGroupSelectionClickedEvent", type="flash.events.Event")]
		[Event(name="OpenCommunityGroupHomeCanvasEvent",       type="flash.events.Event")]
		[Event(name="OpenCommunityGroupBrowserCanvasEvent",    type="flash.events.Event")]
		[Event(name="OpenRegExCanvasEvent",                    type="cEditWebsiteEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.rpc.events.FaultEvent;
			import mx.managers.CursorManager;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
			import mx.events.ListEvent;

		
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * opens scraper starter page in browser
			 */
			private function goUrl():void
			{
				navigateToURL(new URLRequest(url), "_blank")
			}
			
			/**
			 * opens profile of most talkative person in browser
			 */
			private function goChatterbox():void
			{
				navigateToURL(new URLRequest(chatterboxUrl), "_blank")
			}
			
			/**
			 * opens up profile of newest member in browser
			 */
			private function goNewbie():void
			{
				navigateToURL(new URLRequest(newbieUrl), "_blank")
			}
			
			/**
			 * opens up profile of oldest member in browser
			 */
			private function goVeteran():void
			{
				navigateToURL(new URLRequest(veteranUrl), "_blank")
			}
			
			/**
			 * opens up most lively thread in browser
			 */
			private function goLivelyThread():void
			{
				navigateToURL(new URLRequest(livelyThreadUrl), "_blank")
			}
			
			/**
			 * opens up most viewed thread in browser
			 */
			private function goMostViewedThread():void
			{
				navigateToURL(new URLRequest(mostViewedThreadUrl), "_blank")
			}
			
			/**
			 * opens up most mentioned base URL in browser
			 */
			private function goMostMentionedBaseUrl():void
			{
				navigateToURL(new URLRequest("http://" + mostMentionedBaseUrl), "_blank")
			}
			
			/**
			 * opens up most liked base URL in browser
			 */
			private function goMostLikedBaseUrl():void
			{
				navigateToURL(new URLRequest("http://" + mostLikedBaseUrl), "_blank")
			}
			
			/**
			 * opens up least liked base URL in browser
			 */
			private function goLeastLikedBaseUrl():void
			{
				navigateToURL(new URLRequest("http://" + leastLikedBaseUrl), "_blank")
			}
			
			// ================================================================================
			// treeLabel
			//    args:  an XML node
			//    ret:   the text that should be displayed in the tree component
			//    about: Tells Flex how to convert the XML into a textual tree.
			// -------------------------------------------------------------------------------- 
			private function treeLabel(item:Object):String
            {
            	if(item.@label != "") {
            		if(item.@rating != "") {
            			var rate:String = "[" + item.@rating + "] ";
            			if(rate.length >= 4) 
            				return rate + item.@label;
            			else
            				return item.@label;
            		}
            		else {
            			// trace("Item label = "+item.@label);
            			return item.@label;
            		}
            	}
            	else {
					return item.name();
            	}
            }

			/**
			 * Called when the stat request results in error
			 */
			private function statRetrievalErrorHandler(event:FaultEvent):void 
			{
				Alert.show("Problems");
			}
		
			/**
			 * converts unix timestamp to MM/DD/YYYY
			 */
			private function unixToDate(unix:int):String
			{
				var date:Date      = new Date(unix * 1000);     
				var day:Number     = date.getDay();
				var month:Number   = date.getMonth() + 1;
				var year:Number    = date.getFullYear();
				
				return month + "/" + day + "/" + year;
			}
			
			/**
			 *  turns a really long-winded float to only have 2 numbers after the decimal
			 */
			private function twoDecimalPrecision(preciseNumber:Number):Number
			{
				return Math.round(preciseNumber *100) / 100;
			}
			
			/**
			 * Called when the stat request returns
			 */
			private function statResultHandler(event:ResultEvent):void  
			{
				// allow the user to use the page when things finally get loaded
				CursorManager.removeBusyCursor();
				mGeneralPanel.enabled = true;
				mLinksPanel.enabled = true;
				mKeywordsPanel.enabled = true;
				
				var i:int = 0; // used as counter in this function

				// Assign to bound variables to implicitly change the text
				url             = statRequester.lastResult[0].general.url;
				numberOfUsers   = statRequester.lastResult[0].general.numberUsers;
				postsPerDay     = twoDecimalPrecision(Number(statRequester.lastResult[0].general.postsPerDay));
				postsToday      = statRequester.lastResult[0].general.postsToday;
				analyzedPosts   = statRequester.lastResult[0].general.analyzedPosts;
				analyzedThreads = statRequester.lastResult[0].general.analyzedThreads;

				// trace(event.result);				
				trace(statRequester.lastResult.general);
				var chatterboxes:XMLList = statRequester.lastResult[0].general.chatterboxes.user;
				trace("0:"+chatterboxes[0]);
				if(chatterboxes[0]) {		
					chatterboxName   = chatterboxes[0].@label;
					chatterboxUrl    = chatterboxes[0].@url;
					chatterboxRating = chatterboxes[0].@rating;
				}
				
				var newbies:XMLList = statRequester.lastResult[0].general.newbies.user;			
				if(newbies[0]) {
					newbieName   = newbies[0].@label;
					newbieUrl    = newbies[0].@url;
					newbieRating = unixToDate(int(newbies[0].@rating));
				}
				
				var veterans:XMLList = statRequester.lastResult[0].general.veterans.user;			
				if(veterans[0]) {
					veteranName   = veterans[0].@label;
					veteranUrl    = veterans[0].@url;
					veteranRating = unixToDate(int(veterans[0].@rating));
				}
				
				var livelyThreads:XMLList = statRequester.lastResult[0].general.livelyThreads.thread;			
				if(livelyThreads[0]) {
				livelyThreadTitle   = livelyThreads[0].@label;
				livelyThreadUrl     = livelyThreads[0].@url;
				livelyThreadRating  = livelyThreads[0].@rating;
				}
				
				var linkMostMentioned:XMLList = statRequester.lastResult[0].links.mostMentioned;
				if(linkMostMentioned) {
					mostMentionedBaseUrl = linkMostMentioned.@url;
					mostMentionedCount   = linkMostMentioned.@rating;
				}
				
				var linkMostLiked:XMLList = statRequester.lastResult[0].links.mostLiked;
				if(linkMostLiked) {
					mostLikedBaseUrl = linkMostLiked.@url;
					mostLikedRating  = twoDecimalPrecision(Number(linkMostLiked.@rating));
				}
				
				var linkLeastLiked:XMLList = statRequester.lastResult[0].links.leastLiked;
				if(linkLeastLiked) {
					leastLikedBaseUrl = linkLeastLiked.@url;
					leastLikedRating  = twoDecimalPrecision(Number(linkLeastLiked.@rating));
				}
			}
		
			/**
			 * takes you to a thread or user's page in the browser when you click on a tree item
			 */
			private function treeClickHandler(event:ListEvent):void
			{
				var node:XML = event.currentTarget.selectedItem;
				
				// If this is a leaf node then do something
				if(node.elements().length() == 0) {
					// trace("This is leaf");
					navigateToURL(new URLRequest(node.@url), "_blank");
				}

			}
			
			/**
			 * 	Called when the user clicks on the home label.
			 */
			private function homeLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupHomeCanvasEvent");
				this.dispatchEvent(e);
			}
					
			/**
			 * 	Called when the user clicks on the community label.
			 */
			private function communityLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupSelectionClickedEvent");
				this.dispatchEvent(e);
			}
			
			
			/**
			 * 	Called when the user clicks on the community group name label.
			 */
			private function communityNameLabelClickHandler(event:Event):void
			{
				var e:Event = new Event("OpenCommunityGroupBrowserCanvasEvent");
				this.dispatchEvent(e);
			}
			
			/**
			 * 	Called when the user clicks on the edit website button.
			 */
			private function editWebsiteButtonClickHandler(event:Event):void
			{
				var e:cEditWebsiteEvent = new cEditWebsiteEvent("OpenRegExCanvasEvent");
				e.mWebsiteName = mWebsiteName;
				e.mCommunityGroupName = mCommunityGroupName;
				this.dispatchEvent(e);
			}
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   CANVAS EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Called when the canvas is displayed.
			 */
			private function showCanvasHandler(event:Event):void
			{
				mCommunityGroupNameLabel.label = mCommunityGroupName;
				mWebsiteNameLabel.text = mWebsiteName;
				mCommunityGroupNameLabel.x =+ mSep2.x + mSep2.measureText(mSep2.text).width + 10;
				mSep3.x =+ mCommunityGroupNameLabel.x + mCommunityGroupNameLabel.width + 10;
				mWebsiteNameLabel.x =+ mSep3.x + mSep3.measureText(mSep3.text).width + 10;
				
				// hide certain components if mCanvasType is ALL_COMMUNITY
				if((new cCommunityGroupSelectionCanvas()).OTHER_COMMUNITY == mCanvasType) {
					mEditWebsiteButton.visible = false;
					mCommunityGroupLabel.label = "Other Community Group";
				}	
				else {
					mEditWebsiteButton.visible = true;
					mCommunityGroupLabel.label = "My Community Group";
				}
			}
			
			/**
			 * 	Called when the canvas is hidden.
			 */
			private function canvasHideHandler(event:Event):void
			{
				this.cursorManager.removeBusyCursor();
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   MEMBER FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Updates the internal information of this object.
			 */
			public function updateInformation(websiteName:String,
											  communityName:String,
											  canvasType:String):void
			{
				mCommunityGroupName = communityName;
				mWebsiteName = websiteName;	
				mCanvasType = canvasType;
				
				// busy cursor when loading up stats from server
				CursorManager.setBusyCursor();
				
				// Send a request to the server for stats for this object
				trace("Sent stats request");
				// Disable panel until we have received stats
				if(mGeneralPanel)
					mGeneralPanel.enabled = false;
				if(mLinksPanel)
					mLinksPanel.enabled = false;
				if(mKeywordsPanel)
					mKeywordsPanel.enabled = false;
				
				statRequester.send({"websiteName":mWebsiteName});
			}
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   DATA MEMBERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			[Bindable]
			private var SERVER_URL:String = Constants.SERVER_URL+"monarch/Client/";	
			
			// name of the community group
			private var mCommunityGroupName:String = "";
			// name of the website 
			private var mWebsiteName:String = "";
			// the type of canvas to display : either MY_COMMUNITY or ALL_COMMUNITY
			public var mCanvasType:String = "";	
			
			private var mStatsArray:ArrayCollection;
			
			[Bindable]
			private var url:String = "";
			
			[Bindable]
			private var numberOfUsers:int = 0;
			
			[Bindable]
			private var postsPerDay:Number = 0;
			
			[Bindable]
			private var postsToday:int = 0;
			
			[Bindable]
			private var analyzedPosts:int = 0;
			
			[Bindable]
			private var analyzedThreads:int = 0;
	
			[Bindable]
			private var chatterboxName:String = "not enough activity on website for this stat";
			
			[Bindable]
			private var chatterboxUrl:String = SERVER_URL + "404error.html";
			
			[Bindable]
			private var chatterboxRating:Number = 0; 
			
			[Bindable]
			private var newbieName:String = "not enough activity on website for this stat";
			
			[Bindable]
			private var newbieUrl:String = SERVER_URL + "404error.html";
			
			[Bindable]
			private var newbieRating:String = "";
			
			[Bindable]
			private var veteranName:String = "not enough activity on website for this stat";
			
			[Bindable]
			private var veteranUrl:String = SERVER_URL + "404error.html";
			
			[Bindable]
			private var veteranRating:String = "";
			
			[Bindable]
			private var livelyThreadTitle:String = "not enough activity on website for this stat";
			
			[Bindable]
			private var livelyThreadUrl:String = SERVER_URL + "404error.html";
			
			[Bindable]
			private var livelyThreadRating:Number = 0;
			
			[Bindable]
			private var mostViewedThreadTitle:String = "this website does not store view count";
			
			[Bindable]
			private var mostViewedThreadUrl:String = SERVER_URL + "404error.html";
			
			[Bindable]
			private var mostViewedThreadRating:Number = 0;
			
			[Bindable]
			private var mostLikedBaseUrl:String = SERVER_URL + "404error.html";
			
			[Bindable]
			private var mostLikedRating:Number = 0;
			
			[Bindable]
			private var leastLikedBaseUrl:String = SERVER_URL + "404error.html";
			
			[Bindable]
			private var leastLikedRating:Number = 0;
			
			[Bindable]
			private var mostMentionedBaseUrl:String = SERVER_URL + "404error.html";
			[Bindable]
			private var mostMentionedCount:Number = 0;
			
		]]>
	</mx:Script>
	<mx:XMLListCollection id="keywordsTree" source="{statRequester.lastResult.keywords.keyword}"/>
	<mx:HTTPService id="statRequester" method="GET" url="{SERVER_URL}detailStats.php" result="statResultHandler(event)" fault="statRetrievalErrorHandler(event)" resultFormat="e4x"/>	
	<mx:LinkButton click="homeLabelClickHandler(event)" label="Home" id="mHomeLabel" top="2" left="0" />
	<mx:LinkButton click="communityLabelClickHandler(event)" label="My Community Groups" id="mCommunityGroupLabel" top="1" left="79" />
	<mx:LinkButton click="communityNameLabelClickHandler(event)" id="mCommunityGroupNameLabel" top="2" left="267" />
	<mx:Label text="Website Name" id="mWebsiteNameLabel" styleName="pageTitle"  top="1" left="358.5"/>
	<mx:Label text="&gt;" styleName="breadCrumbSeparator"  top="-1" left="58" id="mSep1"/>
	<mx:Label text="&gt;" styleName="breadCrumbSeparator"  top="-1" left="240" id="mSep2"/>
	<mx:Label text="&gt;" styleName="breadCrumbSeparator"  id="mSep3" top="0" left="335"/>
	<mx:Button useHandCursor="true" buttonMode="true" mouseChildren="false" label="Edit Website" styleName="buttonBlack" click="editWebsiteButtonClickHandler(event)" id="mEditWebsiteButton" horizontalCenter="447" verticalCenter="-293" fontWeight="bold" fontStyle="normal" cornerRadius="5" icon="@Embed(source='../images/pencil.png')"/>
	<mx:Panel x="6" y="50" width="494.5" height="349" layout="absolute" title="General" id="mGeneralPanel" enabled="false">
		<mx:Label 
			text="website URL:" 
			x="10" 
		 	y="0"
			toolTip="the entry page of this website"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:LinkButton
			label="{url}"
			x="125" 
		 	y="0"
			toolTip="the entry page of this website"
			click="goUrl()"
		/>
		<mx:Label 
			text="posts per day:" 
			x="10" 
		 	y="25"
			toolTip="the average number of new posts per day"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:Label 
			text="{postsPerDay}" 
			x="134" 
		 	y="25"
			toolTip="the average number of new posts per day"
			styleName="websiteGeneralInfoRating"
		/>
		<mx:Label 
			text="posts today:" 
			x="10" 
			y="50" 
			toolTip="the number of new posts made today"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:Label 
			text="{postsToday}" 
			x="134" 
		 	y="50"
			toolTip="the number of new posts made today"
			styleName="websiteGeneralInfoRating"
		/>
		<mx:Label 
			text="posts analyzed:" 
			x="10" 
			y="75"
			toolTip="the total number of posts Monarch has analyzed since you added this website"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:Label 
			text="{analyzedPosts}"
			x="134" 
		 	y="75"
			toolTip="the total number of posts Monarch has analyzed since you added this website"
			styleName="websiteGeneralInfoRating"
		/>
		<mx:Label 
			text="threads analyzed:" 
			x="10"
			y="100"
			toolTip="the total number of posts Monarch has analyzed since you added this website"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:Label 
			text="{analyzedThreads}" 
			x="134" 
		 	y="100"
			toolTip="the total number of posts Monarch has analyzed since you added this website"
			styleName="websiteGeneralInfoRating"
		/>
		<mx:Label 
			text="users:" 
			x="10"
			y="125"
			toolTip="the total number of people that have posted at least once since you added this site to Monarch"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:Label 
			text="{numberOfUsers}" 
			x="134" 
		 	y="125"
			toolTip="the total number of people that have posted at least once since you added this site to Monarch"
			styleName="websiteGeneralInfoRating"
		/>
		<mx:Label 
			text="chatterbox:" 
			x="10"
			y="150"
			toolTip="user with most posts"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:Label 
			text="{chatterboxRating} posts" 
			x="134"
			y="150"
			toolTip="user with most posts"
			styleName="websiteGeneralInfoRating"
		/>
		<mx:LinkButton
			label="{chatterboxName}"
			x="237" 
		 	y="147"
			toolTip="user with most posts"
			click="goChatterbox()"
		/>
		<mx:Label 
			text="newbie:" 
			x="10"
			y="175"
			toolTip="the newest person that joined this website"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:Label 
			text="joined {newbieRating}" 
			x="134"
			y="175"
			toolTip="user with most posts"
			styleName="websiteGeneralInfoRating"
		/>
		<mx:LinkButton
			label="{newbieName}"
			x="237" 
		 	y="172"
			toolTip="the newest user that joined this website"
			click="goNewbie()"
		/>
		<mx:Label 
			text="veteran:" 
			x="10"
			y="200"
			toolTip="the user that joined the website earliest (that Monarch knows of)"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:LinkButton
			label="{veteranName}"
			x="237" 
		 	y="197"
			toolTip="the user that joined the website earliest (that Monarch knows of)"
			click="goVeteran()"
		/>
		<mx:Label 
			text="joined {veteranRating}" 
			x="134"
			y="200"
			toolTip="user with most posts"
			styleName="websiteGeneralInfoRating"
		/>
		<mx:Label 
			text="lively thread:" 
			x="10"
			y="225"
			toolTip="the thread with the most replies (that Monarch knows of)"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:Label 
			text="{livelyThreadRating} posts" 
			x="134"
			y="225"
			toolTip="user with most posts"
			styleName="websiteGeneralInfoRating"
		/>
		<mx:LinkButton
			label="{livelyThreadTitle}"
			x="237" 
		 	y="222"
			toolTip="the thread with the most replies (that Monarch knows of)"
			click="goLivelyThread()"
		/>
		<mx:Label 
			text="most viewed thread:" 
			x="10"
			y="250"
			toolTip="the thread with the most replies (that Monarch knows of)"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:Label 
			text="{mostViewedThreadRating} views" 
			x="134"
			y="250"
			toolTip="user with most posts"
			styleName="websiteGeneralInfoRating"
		/>
		<mx:LinkButton
			label="{mostViewedThreadTitle}"
			x="237" 
		 	y="247"
			toolTip="the thread with the most replies (that Monarch knows of)"
			click="goMostViewedThread()"
		/>
	</mx:Panel>
	<mx:Panel x="6" y="407" width="494.5" height="200" layout="absolute" title="Links Spoken" id="mLinksPanel" enabled="false">
		<mx:Label 
			text="most mentioned:" 
			x="10"
			y="10"
			toolTip="the external base URL that was most linked to"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:Label 
			text="{mostMentionedCount} times" 
			x="130"
			y="10"
			toolTip="the external base URL that was most linked to"
			styleName="websiteGeneralInfoRating"
		/>
		<mx:LinkButton
			label="{mostMentionedBaseUrl}"
			x="213" 
		 	y="8"
			toolTip="the external base URL that was most linked to"
			click="goMostMentionedBaseUrl()"
		/>
		<mx:Label 
			text="most liked:" 
			x="10"
			y="40"
			toolTip="the external link that people on this website presumably most like"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:Label 
			text="{mostLikedRating} rating" 
			x="130"
			y="40"
			toolTip="the external link that people on this website presumably most like"
			styleName="websiteGeneralInfoRating"
		/>
		<mx:LinkButton
			label="{mostLikedBaseUrl}"
			x="213" 
		 	y="38"
			toolTip="the external link that people on this website presumably most like"
			click="goMostLikedBaseUrl()"
		/>
		<mx:Label 
			text="least liked:" 
			x="10"
			y="70"
			toolTip="the external link that people on this website presumably most hate"
			styleName="websiteGeneralInfoCategory"
		/>
		<mx:Label 
			text="{leastLikedRating} rating" 
			x="130"
			y="70"
			toolTip="the external link that people on this website presumably most hate"
			styleName="websiteGeneralInfoRating"
		/>
		<mx:LinkButton
			label="{leastLikedBaseUrl}"
			x="213" 
		 	y="68"
			toolTip="the external link that people on this website presumably most hate"
			click="goLeastLikedBaseUrl()"
		/>
	</mx:Panel>
	<mx:Panel x="508" y="50" width="494" height="556" layout="absolute" title="Keywords" id="mKeywordsPanel" enabled="false">
		<mx:Tree id="tree" top="10" left="10" dataProvider="{keywordsTree}" labelFunction="treeLabel" itemClick="treeClickHandler(event)" width="470" height="505" showRoot="true"/>	
	</mx:Panel>
	
</mx:Canvas>
