<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="1013" height="625" xmlns:local="*">
	<mx:Metadata>
		[Event(name="CreateCommunityGroupEvent", type="cCreateCommunityGroupEvent")]
		[Event(name="RequestWebsiteStatsEvent", type="cAllPurposeEvent")]
		[Event(name="OpenWebsiteCreatorWindowEvent", type="cCreateWebsiteEvent")]
		[Event(name="EditWebsiteLabelClickedEvent", type="cEditWebsiteEvent")]
		[Event(name="OpenAddWebsiteWindowEvent", type="cCreateWebsiteEvent")]
		[Event(name="NewKeywordAddedEvent", type="cNewKeywordEvent")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
		
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							GUI EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
		
			/**
			 * 	Function which switches the mMyCommViewStack index to 0 (home).
			 */
			private function createCommBackLabelClickedHandler(event:Event):void
			{
				mMyCommViewStack.selectedIndex = 0;
			}
			
			/**
			 * Function which switches the mMyCommViewStack index to 2 (website browser).
			 */
			private function WebsiteBrowserBackClickedHandler(event:Event):void
			{
				mMyCommViewStack.selectedIndex = 2;
			}
			
			/**
			 * 	Function which switches the mMyCommViewStack index to 2 (website browser).
			 */
			private function RegularExpressionEditorBackClickedHandler(event:Event):void
			{
				mMyCommViewStack.selectedIndex = previousView;
			}
			
			/**
			 * 	Detects a request to create a community group. It will fire an event to notify
			 * 	that a community group should be created.
			 */
			private function createCommunityGroupHandler(event:cCreateCommunityGroupEvent):void
			{
				var e:cCreateCommunityGroupEvent = new cCreateCommunityGroupEvent("CreateCommunityGroupEvent");
				e.mCommName = event.mCommName;
				e.mKeywords = event.mKeywords;
				this.dispatchEvent(e);
			}
			
			/**
			 * 	Fires an event to the main canvas to open the add website window.
			 */
			private function openAddWebsiteWindowHandler(event:cCreateWebsiteEvent):void
			{
				var e:cCreateWebsiteEvent = new cCreateWebsiteEvent("OpenAddWebsiteWindowEvent");
				e.mCommunityGroupName = event.mCommunityGroupName;
				e.mCommunityGroupId = event.mCommunityGroupId;
				this.dispatchEvent(e);
			}
			
		
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   CANVAS EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Detects a create community groups request from cMyCommHomeCanvas and
			 *  opens the create community group canvas.
			 */
			private function openCreateCommGroupCanvasHandler(event:Event):void
			{
				mMyCommViewStack.selectedIndex = 2;
			}
			
			/**
			 * 	Detects request to view a particular community group and launches the community
			 *  group browser canvas.
			 */
			private function openCommunityGroupBrowserCanvasHandler(event:cCommGroupGraphicClickedEvent):void
			{
				mCommunityGroupBrowserCanvas.updateInformation(event.mCommGroupName,
															   event.mCommGroupId,
															   event.mCreator,
															   event.mTime.toString(),
															   event.mWebsites,
															   event.mKeywords,
															   event.mCanvasType);
				mMyCommViewStack.selectedIndex = 3;
			}
			
			/**
			 * 	Differs from the openCommunityGroupBrowserCanvasHandler function in that we don't need
			 * 	to update the internal information of mCommunityGroupBrowserCanvas. Used to quickly switch
			 * 	to an existing instance of the canvas.
			 */
			private function reOpenCommunityGroupBrowserCanvasHandler(event:Event):void
			{
				mMyCommViewStack.selectedIndex = 3;
			}
			
			/**
			 * 	Differs from openAdditionalWebsiteInformationHandler function in that we don't need 
			 * 	to update the internal information of cCommunityGroupEditorCanvas. Used to quickly switch
			 * 	to an existing instance of the canvas. 
			 */
			private function reOpenWebsiteAdditionalStatBrowserCanvasHandler(event:Event):void
			{
				mMyCommViewStack.selectedIndex = 4;
			}
			
			/**
			 *	Opens the additional website information canvas.
			 */
			private function openAdditionalWebsiteInformationHandler(event:cAccordionWebsiteGraphicEvent):void
			{
				mMyCommViewStack.selectedIndex = 4;
				mWebsiteAdditionalInformationStatBrowserCanvas.updateInformation(event.mWebsiteName,
																			     event.mCommuniutyGroupName,
																			     event.mCanvasType);
			}
			
			/**
			 *  Opens the community group selection canvas
			 */
			private function openCommunityGroupSelectionCanvas(event:Event):void
			{
				if(mCanvasType == (new cCommunityGroupSelectionCanvas()).MY_COMMUNITY) {
					mMyCommViewStack.selectedIndex = 1;
				}
				else {
					mMyCommViewStack.selectedIndex = 7;
				}
			}
			
			/**
			 * 	Detects a request to open the create website window and fires a request to the main window.
			 */
			private function openWebsiteCreatorWindowHandler(event:cCreateWebsiteEvent):void
			{
				var e:cCreateWebsiteEvent = new cCreateWebsiteEvent("OpenWebsiteCreatorWindowEvent");
				e.mCommunityGroupId = event.mCommunityGroupId;
				this.dispatchEvent(e);
			}
			
			/**
			 * 	Opens the community group editor canvas.
			 */
			private function openCommunityGroupEditorCanvasHandler(event:cCommunityGroupEditorEvent):void
			{
				mMyCommViewStack.selectedIndex = 5;
				communityGroupEditorCanvas.updateInformation(event.mCommuniutyGroupName,
															 event.mCommunityGroupId,
															 event.mKeywords,
															 event.mWebsites);
			}
			
			/**
			 * 	Sends request to server for current website settings
			 */
			private function EditWebsiteHandler(event:cEditWebsiteEvent):void
			{
				trace("EditWebsiteHandler");
				// Rather than sending this to the engine, I choose to add an HTTPService
				// to this class and handle it here (easier to follow)
				websiteSettingsRequester.send({"websiteName":event.mWebsiteName});
				
				// Set this variable so we know which community is selected to show in
				// the breadcrumbs
				mCommunitySelectedName = event.mCommunityGroupName;
			}
			
			/**
			 * Called when we have received the result from the server
			 */
			private function settingsResultHandler(event:ResultEvent):void
			{
				trace(event.result);
				var websiteSettings:Object = parseWebsiteSettings(String(event.result));				

				// TODO: Copy the settings that server returned into an event and
				// call updateInformation to initialize the regular expression
				// handler
				var evt:cCreateWebsiteEvent = new cCreateWebsiteEvent("edit");
				evt.mWebsiteURL = websiteSettings["startPage"];
				evt.mCommunityGroupName = mCommunitySelectedName;
				
				var regexList:Array = RegexUtilities.getAllRegexFieldnames();
				
				// Populate regular expression map
				for each(var regex:String in regexList) {
					evt.regularExpressionMap[RegexUtilities.fieldnameToEnglish(regex)] = websiteSettings[regex];
				}
				
				trace("Next PoP = " + evt.regularExpressionMap["next page of posts"]);
				evt.topLevelBreadth = websiteSettings["scrapeNumTopLevel"];
				trace("Top level="+evt.topLevelBreadth);
				evt.crawlingPeriod = websiteSettings["scrapeInterval"];
				trace("C. per="+evt.crawlingPeriod);

				openRegularExpressionEditorCanvas(evt);	
				
			}
			
			/**
			 * Accepts a string containing website settings info and returns
			 * the information in a key-value pair Object
			 */ 
			private function parseWebsiteSettings(str:String):Object
			{
				var returnValue:Object = {};
				var settingsFormat:RegExp = new RegExp("startPage=(.*);nextPageOfThreads=(.*);nextPageOfPosts=(.*);threadUrl=(.*);threadNumViews=(.*);threadTitle=(.*);firstPostAuthor=(.*);firstPostAuthorUrl=(.*);firstPostTime=(.*);firstPostMessage=(.*);replyAuthor=(.*);replyAuthorUrl=(.*);replyTime=(.*);replyMessage=(.*);scrapeNumTopLevel=(.*);scrapeInterval=(.*);");
				var regExpResult:Object = settingsFormat.exec(str);
				trace("Regex match:"+regExpResult[0]);
				trace("NextPageOfThreads:"+regExpResult[2]);
				
				returnValue["startPage"] = regExpResult[1];
				returnValue["nextPageOfThreads"] = regExpResult[2];
				returnValue["nextPageOfPosts"] = regExpResult[3];
				returnValue["threadUrl"] = regExpResult[4];
				returnValue["threadNumViews"] = regExpResult[5];
				returnValue["threadTitle"] = regExpResult[6];
				returnValue["firstPostAuthor"] = regExpResult[7];
				returnValue["firstPostAuthorUrl"] = regExpResult[8];
				returnValue["firstPostTime"] = regExpResult[9];
				returnValue["firstPostMessage"] = regExpResult[10];
				returnValue["replyAuthor"] = regExpResult[11];
				returnValue["replyAuthorUrl"] = regExpResult[12];
				returnValue["replyTime"] = regExpResult[13];
				returnValue["replyMessage"] = regExpResult[14];
				trace("Top level = "+regExpResult[15]);
				returnValue["scrapeNumTopLevel"] = int(regExpResult[15]);
				trace("Interval = "+regExpResult[16]);
				returnValue["scrapeInterval"] = int(regExpResult[16]);
				
				return returnValue;
			}
			
			/**
			 * Called when there is a problem connecting
			 */
			private function faultHandler(event:FaultEvent) {
				Alert.show("Action failed with the following error: "+event.fault);
			}
			
			/**
			 *	 Detects a request to open the regular expression editor canvas.
			 */
			private function editWebsiteLabelClickedHandler(event:cEditWebsiteEvent):void
			{
				previousView = mMyCommViewStack.selectedIndex;
				mMyCommViewStack.selectedIndex = 4;
			}
			
			/**
			 * 	Handler which displays the My Community Group Selection Canvas.
			 */
			private function myCommunityGroupClickedHandler(event:Event):void
			{
				mCommunitySelectionCanvas.updateCanvasTypeInformation(mCanvasType);
				mMyCommViewStack.selectedIndex = 1;
			}
			
			/**
			 * 	Handler which displays the All Community Group Selection Canvas.
			 */
			private function allCommunityGroupClickedHandler(event:Event):void
			{
				mCommunitySelectionCanvas.updateCanvasTypeInformation(mCanvasType);
				mMyCommViewStack.selectedIndex = 7;
			}
			
			/**
			 * 	Called when the my community group selection canvas is displayed
			 */
			private function showMyCommunityGroupsSelectionCanvasHandler(event:Event):void
			{
				mCommunitySelectionCanvas.updateInformation(mUserAccountInformation,
													mCommunitySelectionCanvas.MY_COMMUNITY);
				// tell the application to display the my community group canvas's
				mCanvasType = mCommunitySelectionCanvas.MY_COMMUNITY;
			}
			
			/**
			 * 	Called when the all community group selection canvas is displayed
			 */
			private function showAllCommunityGroupsSelectionCanvasHandler(event:Event):void
			{
				mAllCommHomeCanvas.updateInformation(mUserAccountInformation,
													 mAllCommHomeCanvas.OTHER_COMMUNITY);
				// tell the application to display the other community group canvas's
				mCanvasType = mCommunitySelectionCanvas.OTHER_COMMUNITY;
			}
			
			/**
			 * 
			 */
			private function openCommunityGroupHomeCanvas(event:Event):void
			{
				mMyCommViewStack.selectedIndex = 0;		
			}
			
			/**
			 * 	
			 */
			private function fetchWebsiteAnalyticsHandler(event:cAllPurposeEvent):void
			{
				var e:cAllPurposeEvent = new cAllPurposeEvent("RequestWebsiteStatsEvent");
				e.mWebsiteName = event.mWebsiteName;
				e.mCommGroupId = event.mCommGroupId;
				this.dispatchEvent(e);
			}
		
			
			/**
			 * Called when the mRegularExpressionEditorCanvas recieves the RegExProcessingCompleteEvent.
			 */
			private function regExProcessingCompleteHandler(event:cCreateWebsiteEvent):void
			{
				Alert.show("RegEx Processing Complete");
				mMyCommViewStack.selectedIndex = previousView;
				var settingsObj:Object = event.getSettingsObject();
				
				// Package up data and ship it to the server
				websiteSettingsSetter.send(settingsObj);
				// TODO: Return user to the screen that they were viewing prior to entering the regular expression
				//  editor
			}
			
			private function setSettingsReplyHandler(event:ResultEvent):void 
			{
				trace("Server reply:"+event.result);
			}
			
			/**
			 * 	Called when the cCommunityGroupEditorCanvas receives a NewKeywordAddedEvent.
			 */
			private function newKeywordAddedEvent(event:cNewKeywordEvent):void
			{
				for(var i:int = 0; i < mUserAccountInformation.mCommunities.length; i++) {
					var community:cCommunityGroupEntry = cCommunityGroupEntry(mUserAccountInformation.mCommunities.getItemAt(i));
					if(event.mKeywordEntry.mCommunityGroupId == community.mId) {
						community.mKeywords.addItem(event.mKeywordEntry);
						mCommunityGroupBrowserCanvas.updateKeywords(community.mKeywords);
						var e:cNewKeywordEvent = new cNewKeywordEvent("NewKeywordAddedEvent");
						e.mKeywordEntry = event.mKeywordEntry;
						this.dispatchEvent(e);
						return;
					}
				}	
			}
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   MEMBER FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 	Opens the regular expression editor canvas.
			 */
			public function openRegularExpressionEditorCanvas(event:cCreateWebsiteEvent):void
			{
				previousView = mMyCommViewStack.selectedIndex;
				mMyCommViewStack.selectedIndex = 6;
				mRegularExpressionEditorCanvas.updateInformation(event);
			}
			
			/**
			 * 	Function which updates the users information within this canvas component to be used
			 *  at a later time.
			 */
			public function updateInformation(userAccountInformation:cAccountInformation):void
			{
				mUserAccountInformation = userAccountInformation;	
			}
			
			/**
			 * 	Selects the website statistics browser canvas within the mMyCommViewStack.
			 */
			public function updateWebsiteAnalytics(analyticsParser:cAnalyticsParser):void
			{
				mCommunityGroupBrowserCanvas.updateAnalyticsInformation(analyticsParser);
			}
			
			/**
			 * 	Calls the addWebsiteToVBoxes function in the cCommunityGroupBrowserCanvas.
			 */
			public function addWebsiteToCommGroupBrowerCanvas(websiteEntry:cWebsiteEntry):void {
				//mCommunityGroupBrowserCanvas.addWebsiteToVBoxes(websiteEntry);
			}
			
			/**
			 *  Selects the my community home canvas within the mMyCommViewStack.
			 *  Function used when this canvas has been selected in the past by
			 * 	mMyCommViewStack must be altered.
			 */
			public function openMyCommHomeCanvas():void
			{
				if(mMyCommViewStack != null) {
					mMyCommViewStack.selectedIndex = 0;
				}
			}
		
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//						   DATA MEMBERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			// reference to the users community group information object
			private var mUserAccountInformation:cAccountInformation = null;
			
			// selected website information (temporary - changes each time a website is selected)
			private var mWebsiteSelectedName:String = "";
			private var mWebsiteSelectedURL:String = "";
			private var mWebsiteSelectedType:String = "";
			private var mWebsiteSelectedCreatedTime:String = "";
			
			private var mCommunitySelectedName:String = "";
			
			// This is used to store the view to restore after the user has completed the regular expression
			//  wizard
			private var previousView:int = -1;
			
			// the type of canvas to display : either MY_COMMUNITY or ALL_COMMUNITY
			public var mCanvasType:String = "";
			
				
		]]>
	</mx:Script>
	<mx:HTTPService id="websiteSettingsRequester" url="{Constants.SERVER_URL}monarch/Client/getWebsiteSettings.php" resultFormat="text" result="settingsResultHandler(event)" fault="faultHandler(event)"/>
	<mx:HTTPService id="websiteSettingsSetter" url="{Constants.SERVER_URL}monarch/Client/setWebsiteSettings.php" resultFormat="text" result="setSettingsReplyHandler(event)" fault="faultHandler(event)"/>
	<mx:ViewStack x="0" y="0" id="mNavigatorViewStack" width="1013" height="625">
		<mx:ViewStack id="mMyCommViewStack" label="My Community Groups" width="1013" height="625">
			<local:cCommunityGroupHomeCanvas id="mMyCommunityGroupHomeCanvas" 
												MyCommunityGroupClickedEvent="myCommunityGroupClickedHandler(event)" 
												AllCommunityGroupClickedEvent="allCommunityGroupClickedHandler(event)"
												height="616" width="1012">
			</local:cCommunityGroupHomeCanvas>
			<local:cCommunityGroupSelectionCanvas id="mCommunitySelectionCanvas" OpenCommunityGroupHomeCanvasEvent="openCommunityGroupHomeCanvas(event)" 
																		   show="showMyCommunityGroupsSelectionCanvasHandler(event)" 
																		   OpenCommunityGroupBrowserCanvasEvent="openCommunityGroupBrowserCanvasHandler(event)" 
																		   OpenCreateCommunityGroupCanvasEvent="openCreateCommGroupCanvasHandler(event)" 
																		   label="My Community Groups" height="616" width="1012">
			</local:cCommunityGroupSelectionCanvas>
			<local:cCreateCommunityGroupCanvas id="mCreateCommunityGroupCanvas" OpenCommunityGroupSelectionClickedEvent="myCommunityGroupClickedHandler(event)" 
																				OpenCommunityGroupHomeCanvasEvent="openCommunityGroupHomeCanvas(event)" 
																				BackLabelClickedEvent="createCommBackLabelClickedHandler(event)" 
																				CreateCommunityGroupEvent="createCommunityGroupHandler(event)"
																				height="577" width="1003">
			</local:cCreateCommunityGroupCanvas>
			<local:cCommunityGroupBrowserCanvas id="mCommunityGroupBrowserCanvas" OpenAddWebsiteWindowEvent="openAddWebsiteWindowHandler(event)" 
																				  FetchWebsiteAnalytics="fetchWebsiteAnalyticsHandler(event)" 
																				  OpenCommunityGroupEditorCanvasEvent="openCommunityGroupEditorCanvasHandler(event)" 
																				  OpenAdditionalWebsiteInformationEvent="openAdditionalWebsiteInformationHandler(event)" 
																				  OpenCommunityGroupSelectionClickedEvent="openCommunityGroupSelectionCanvas(event)" 
																				  OpenCommunityGroupHomeCanvasEvent="openCommunityGroupHomeCanvas(event)" >
			</local:cCommunityGroupBrowserCanvas>
			<local:cWebsiteAdditionalStatsBrowserCanvas id="mWebsiteAdditionalInformationStatBrowserCanvas" 
																		OpenRegExCanvasEvent="EditWebsiteHandler(event)" 
																		OpenCommunityGroupBrowserCanvasEvent="reOpenCommunityGroupBrowserCanvasHandler(event)" 
																		OpenCommunityGroupHomeCanvasEvent="openCommunityGroupHomeCanvas(event)" 
																		OpenCommunityGroupSelectionClickedEvent="openCommunityGroupSelectionCanvas(event)">
			</local:cWebsiteAdditionalStatsBrowserCanvas>
			<local:cCommunityGroupEditorCanvas id="communityGroupEditorCanvas"  
											   OpenAddWebsiteWindowEvent="openAddWebsiteWindowHandler(event)"
				                   			   OpenCommunityGroupBrowserCanvasEvent="reOpenCommunityGroupBrowserCanvasHandler(event)" 
				                   			   OpenCommunityGroupHomeCanvasEvent="openCommunityGroupHomeCanvas(event)" 
				                   			   OpenCommunityGroupSelectionClickedEvent="openCommunityGroupSelectionCanvas(event)"
				                   			   NewKeywordAddedEvent="newKeywordAddedEvent(event)">
				                   			   
			</local:cCommunityGroupEditorCanvas>
			<local:cRegularExpressionEditorCanvas id="mRegularExpressionEditorCanvas" 
												OpenWebsiteAdditionalStatBrowserCanvasEvent="reOpenWebsiteAdditionalStatBrowserCanvasHandler(event)" 
												OpenCommunityGroupBrowserCanvasEvent="reOpenCommunityGroupBrowserCanvasHandler(event)" 
												OpenCommunityGroupHomeCanvasEvent="openCommunityGroupHomeCanvas(event)" 
												RegExProcessingCompleteEvent="regExProcessingCompleteHandler(event)"
												OpenCommunityGroupSelectionClickedEvent="openCommunityGroupSelectionCanvas(event)">
			</local:cRegularExpressionEditorCanvas>
			<local:cCommunityGroupSelectionCanvas id="mAllCommHomeCanvas" OpenCommunityGroupHomeCanvasEvent="openCommunityGroupHomeCanvas(event)" 
																		   show="showAllCommunityGroupsSelectionCanvasHandler(event)" 
																		   OpenCommunityGroupBrowserCanvasEvent="openCommunityGroupBrowserCanvasHandler(event)" 
																		   label="My Community Groups" height="616" width="1012">
			</local:cCommunityGroupSelectionCanvas>
		</mx:ViewStack>
		<mx:ViewStack id="mAllCommViewStack" label="All Community Groups" width="1013" height="585">
			<mx:Canvas label="All Community Groups" width="100%" height="100%">
			</mx:Canvas>
		</mx:ViewStack>
	</mx:ViewStack>
</mx:Canvas>
