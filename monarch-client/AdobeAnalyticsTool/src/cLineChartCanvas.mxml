<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="815" height="529.45" >

	<mx:Script>
		<![CDATA[
			import mx.controls.Label;
			import mx.charts.DateTimeAxis;
			
			import mx.charts.BarChart;
			import mx.charts.CategoryAxis;
			import mx.charts.Legend;
			import mx.charts.LineChart;
			import mx.charts.LinearAxis;
			import mx.charts.series.BarSeries;
			import mx.charts.series.LineSeries;
			import mx.collections.ArrayCollection;
			import mx.controls.Button;
			import mx.graphics.Stroke;
			import mx.controls.Alert;
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							 MEMBER FUNCTIONS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 * 
			 */
			public function updateInformation(analyticsParser:cAnalyticsParser,
											  statOptionSelected:cStatOptionSelectedEvent,
											  selectedKeywords:ArrayCollection):void
			{			
				if(statOptionSelected == null) { return; }
				
				var mLineGraphData:Array = new Array();
			
				// set the text and axis color and font
				this.mLineChart.showDataTips = true;
				
				vAxis.title = statOptionSelected.mTitle;
				vAxis.displayName = statOptionSelected.mDisplayName;
				vAxis.autoAdjust = true;

				this.mLineChart.verticalAxis = vAxis;
				
				var hAxis:DateTimeAxis = new DateTimeAxis();
				hAxis.alignLabelsToUnits = true;
				hAxis.displayLocalTime = true;
				hAxis.autoAdjust = true;
				// current date as reference
				var date:Date = new Date();
				
				hAxis.title = "time";
				
				if(statOptionSelected.mTimeSpan == statOptionSelected.TIME_SPAN_1_WEEK) {
					hAxis.displayName = "Date";
					//hAxis.title = "Time (Past 7 Days)"; redundant information
					hAxis.dataUnits = "days";
					hAxis.labelUnits = "days";
					
					hAxis.minimum = new Date(date.getFullYear(), date.getMonth(), date.getDate() - 6, date.getHours() - 4);
					hAxis.maximum = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() + 4);
				}
				else if (statOptionSelected.mTimeSpan == statOptionSelected.TIME_SPAN_2_WEEKS) {
					hAxis.displayName = "Date";
					//hAxis.title = "Time (Past 14 Days)"; redundant information
					hAxis.dataUnits = "days";
					hAxis.labelUnits = "days";
					
					hAxis.minimum = new Date(date.getFullYear(), date.getMonth(), date.getDate() - 13, date.getHours() - 4);
					hAxis.maximum = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() + 4);
				}
				else if(statOptionSelected.mTimeSpan == statOptionSelected.TIME_SPAN_1_MONTH) {
					hAxis.displayName = "Date";
					//hAxis.title = "Time (Past 30 days/1 month)"; redundant information
					hAxis.dataUnits = "weeks";
					hAxis.labelUnits = "weeks";
					
					hAxis.minimum = new Date(date.getFullYear(), date.getMonth(), date.getDate() - 30, date.getHours() - 4);
					hAxis.maximum = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() + 4);
				}
				else if(statOptionSelected.mTimeSpan == statOptionSelected.TIME_SPAN_6_MONTHS) {
					hAxis.displayName = "Date";
					//hAxis.title = "Time (Past 6 Months)"; redundant information
					hAxis.dataUnits = "weeks";
					hAxis.labelUnits = "weeks";
					
					hAxis.minimum = new Date(date.getFullYear(), date.getMonth() - 6, date.getDate(), date.getHours() - 4);
					hAxis.maximum = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() + 4);
				}
				else if(statOptionSelected.mTimeSpan == statOptionSelected.TIME_SPAN_9_MONTHS) {
					hAxis.displayName = "Date";
					//hAxis.title = "Time (Past 9 Months)"; redundant information
					hAxis.dataUnits = "months";
					hAxis.labelUnits = "months";
					
					hAxis.minimum = new Date(date.getFullYear(), date.getMonth() - 9, date.getDate(), date.getHours() - 4);
					hAxis.maximum = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() + 4);
				}
				else if(statOptionSelected.mTimeSpan == statOptionSelected.TIME_SPAN_1_YEAR) {
					hAxis.displayName = "Date";
					//hAxis.title = "Time (Past 1 Year)"; redundant information
					hAxis.dataUnits = "months";
					hAxis.labelUnits = "months";
					
					hAxis.minimum = new Date(date.getFullYear() - 1, date.getMonth(), date.getDate(), date.getHours() - 4);
					hAxis.maximum = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() + 4);
				}
				
				this.mLineChart.horizontalAxis = hAxis;
				
				var seriesCollection:Array = new Array();
				var x:Number, j:int, y:Number, timeStamp:int;
				var dateString:String;
				// loop through all of the keywords for the community 
				for(var i:int = 0; i < analyticsParser.mKeywordData.length; i++)
				{
					var keyword:cKeywordAnalyticsEntry = cKeywordAnalyticsEntry(analyticsParser.mSortedData.getItemAt(i));
					var hasKeyword:Boolean = false;
					// check if the keyword has been selected for viewing by the user
					for(var word:int = 0; word < selectedKeywords.length; word++) {
						trace("selectedKeywords.getItemAt(word).toString() = "+selectedKeywords.getItemAt(word).toString());
						trace("keyword.mName = "+keyword.mName);
						
						if(selectedKeywords.getItemAt(word).toString() == keyword.mName) {
							hasKeyword = true;
						}
					}
					// if the keyword was selected for viewing then extract its data points
					if(hasKeyword) {
						var series:LineSeries = new LineSeries();
						
						for(j = 0; j < keyword.mTimeCollection.length; j++) {

							dateString = String(keyword.mTimeCollection.getItemAt(j));
							
							y = Number(keyword.mGoodnessCollection.getItemAt(j)) * statOptionSelected.mEnglishProficiency + 
							    Number(keyword.mEnglishProficiencyCollection.getItemAt(j)) * statOptionSelected.mGoodnessWeight  +
							    Number(keyword.mCountCollection.getItemAt(j)) * statOptionSelected.mCountWeight;
							
							mLineGraphData.push({(i.toString()):dateString, (i.toString()+"b"):y});
						}		
						
						trace("timeCollection length = "+keyword.mTimeCollection.length);
						/*
						var stroke:Stroke = new Stroke();
						// move this out 
		        		
		        		stroke.color = keyword.mColor;
		        		stroke.weight = 3;
		 				series.setStyle("lineStroke", stroke);
		 				*/
		        		series.xField = i.toString();
		        		series.yField = i.toString()+"b";  
		        		
		        		series.displayName = keyword.mName; 
						
						seriesCollection.push(series);	
					}
				}
					
				this.mLineChart.series = seriesCollection;
				this.mLineChart.dataProvider = mLineGraphData;	

				this.mLineChartLegend.dataProvider = this.mLineChart;				
				
				this.mLineChartLegend.toolTip = "legend";
			}
			
			
			/**
			 * 	Function which zooms the graph inward by one unit.
			 */
			public function zoomIn():void
			{
				mVMinimum = vAxis.minimum;
				mVMaximum = vAxis.maximum;
				
				if(mVMinimum < -1) {
					mVMinimum = mVMinimum + 10;
				}
				if(mVMaximum > 1) {
					mVMaximum = mVMaximum - 10;
				}
				vAxis.minimum = mVMinimum;
				vAxis.maximum = mVMaximum;
			}
			
			/**
			 * 	Function which zooms the graph outward by one unit.
			 */
			public function zoomOut():void
			{
				mVMinimum = mVMinimum - 10;
				mVMaximum = mVMaximum + 10;
				vAxis.minimum = mVMinimum;
				vAxis.maximum = mVMaximum;
			}
			
			/**
			 * 	Converts an interger representation of a day to a that of a string.
			 */
			private function dayIntToString(day:int):String
			{
				if(day == 0) {
					return "Monday";
				}
				else if(day == 1) {
					return "Tuesday";
				}
				else if(day == 2) {
					return "Wedesday";
				}
				else if(day == 3) {
					return "Thursday";
				}
				else if(day == 4) {
					return "Friday";
				}
				else if(day == 5) {
					return "Saturday";
				}
				else if(day == 6) {
					return "Sunday";
				}
				else {
					return "Unknown";
				}
			}
			
			/**
			 *  Clears the line chart data.
			 */
			public function clearData():void
			{
				
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							 EVENT HANDLERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			/**
			 *  Called when the line chart is first created.
			 */
			private function lineChartCreationCompleteHandler(event:Event):void
			{
				/*var label:Label = new Label();
				label.setStyle("color", "0xFF0000");
				label.setStyle("fontSize", 14);
				label.text = "To View Statistics Click on a Website on the Right.";
				label.x = (this.width / 2) - 100;
				label.y = (this.height / 2) - 20;
				this.addChild(label);*/				
			}
			
			
			///////////////////////////////////////////////////////////////////////////////////
			//
			//							 DATA MEMBERS
			//
			///////////////////////////////////////////////////////////////////////////////////
			
			// the vertical axis attributes
			private var vAxis:LinearAxis = new LinearAxis();
			// v axis minimum and maximum values
			private var mVMinimum:int = -3;
			private var mVMaximum:int = 3;
			
			private var mVFocusMin:int = 0;
			private var mVFocusMax:int = 0;
			
		]]>
	</mx:Script>

	<mx:LineChart 
		id="mLineChart" 
		creationComplete="lineChartCreationCompleteHandler(event)" 
		width="815" 
		height="492" 
		verticalCenter="-19" 
		horizontalCenter="0">
		<mx:series>
			<mx:LineSeries displayName="Series 1" id="lineChartSeries" />
		</mx:series>
	</mx:LineChart>
	<mx:Legend 
		width="815" 
		height="29" 
		id="mLineChartLegend" 
		verticalCenter="250" 
		horizontalCenter="0"
		/>
	
</mx:Canvas>
