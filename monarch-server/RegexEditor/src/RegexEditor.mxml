<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ns1="http://www.adobe.com/2006/air"
	addedToStage="init(event)" viewSourceURL="srcview/index.html" width="1028" height="878">
    <mx:Script>
        <![CDATA[
        import mx.controls.textClasses.TextRange;
        import flash.html.HTMLLoader;
        import flash.net.URLRequest;  
		import mx.core.UIComponent;
        
		private var unmodifiedBackground:String;
		private var modifiedElements:Array;
        
        private var html:HTMLLoader;
        private var urlLoader:URLLoader;
        private var pageContents:String = "";
        private var currentMatches:Array;
		
		private function init(event:Event):void
		{
			html = new HTMLLoader();				
			html.addEventListener(Event.COMPLETE, onHTMLLoadComplete);
 			
			// Create UIComponent to add html object to  
			var myComponent:UIComponent  = new UIComponent();  
			myComponent.addChild(html);  
  		    		
  		    // Scale HTMLLoader down
    		// myComponent.scaleX = 0.8;
    		// myComponent.scaleY = 0.8;	
  			
  			// now add component to stage  
			htmlBox.addChild(myComponent);
			
			modifiedElements = new Array();  
		}
			
		private function onHTMLLoadComplete(event:Event):void {
			
			html.width = htmlBox.width;
    		html.height = 2880;

    		highlightButton.enabled=true;
    		saveButton.enabled = true;
    		
       	}
		
		private function highlightMatches(event:Event):void {    		
			highlightViewMatches(new RegExp(regexString.text, ""));
			highlightSourceMatches(new RegExp(regexString.text, "g"));
			
		}
		
		private function highlightViewMatches(usrRegex:RegExp):void {
			// Reinitialize match label and match text
    		matchesText.text = "No captured text";
    		
    		// Be sure that we are modifying unhighlighted page	
			for each(var elem:Object in modifiedElements) {
				elem.style.background = unmodifiedBackground;
			}
    		
    		modifiedElements = new Array();
    		
    		// Begin highlighting matches from root node
    		trace(html);
    		highlightMatchesRec(html.window.document.documentElement, usrRegex);
		}
		
		private function highlightSourceMatches(usrRegex:RegExp):void {
			
			var result:Array = usrRegex.exec(pageSource.text);
			
			while (result != null) {
				// Highlight match
				applyTextHighlight(pageSource, result.index, usrRegex.lastIndex);
    			// trace("SourceMatches:", result.index, "\t", usrRegex.lastIndex, "\t", result[0].length);
    			
    			// Find next match
    			result = usrRegex.exec(pageSource.text);
			}
		}
		
		private function applyTextHighlight(textField:UIComponent, startIndex:int,
                              endIndex:int):void
		{
     		var tr:TextRange = new TextRange(textField, false, startIndex, endIndex);
    		var highlightedPropsObject:Object = {color:"red", fontWeight:"bold", fontSize:12};
    		// trace("Highlihting text range from ", startIndex, " to ", endIndex);
     		setTextFormat(tr, highlightedPropsObject);
		}

		private function setTextFormat(tr:TextRange, obj:Object):void{
    		//loop through the objects properties and assign each value to your TextRange
    		//instance (only if the instance already has such a property declared)
    		for(var i:String in obj){
    			if(tr.hasOwnProperty(i)){
        			tr[i] = obj[i];
    			}else{
        			trace("some error handling here"); 
        		}
    		}
  }
		
		private function highlightMatchesFromList(elemList:Object, regex:RegExp):void {
			// Save an unmodified background color
			unmodifiedBackground = elemList[0].style.background;
			
			// Highlight all elements in the element list that match the regular expression
			trace(elemList.length);
			for(var i:Number = 0; i < elemList.length; i++) {
				var match:Object = regex.exec(elemList[i].outerHTML);
				if(match != null) {
					if(match.length >= 2) {
						matchesText.text += ("\n\n* " + match[1]);
					}					

					modifiedElements.push(elemList[i]);
					elemList[i].style.background = "yellow";
					trace("Highlighting "+elemList[i].outerHTML.slice(0,10)+" . . . ");
				}
			}
		}
		
		private function highlightMatchesRec(elem:Object, regex:RegExp):void {	
			trace("Element type = " + elem.tagName);
			// trace("Element outerHTML = " + elem.outerHTML);
			// If there is no match within this node, return
			if(elem.outerHTML.search(regex) == -1) {
				return;
			}
			// There is a match so recurse and highlight matches
			else {
				var children:Object = elem.getElementsByTagName("*");
								
				var childHasMatch:Boolean = false;
				for(var i:Number = 0; i < children.length; i++) {
					if(children[i].outerHTML.search(regex) != -1) {
						childHasMatch = true;
						highlightMatchesRec(children[i], regex);
						return; // find only the first match
					}
				}
				
				// If there are no children which match the regex, run the tag-name-based
				// algorithm on nodes having the same tag name as this element
				if(childHasMatch == false) {
					trace("Tag Name = "+elem.tagName);
					highlightMatchesFromList(html.window.document.getElementsByTagName(elem.tagName), regex);
					// elem.style.background = "yellow";
				} 
			}
		}
		
		private function loadPage(event:Event):void {
			html.load(new URLRequest(searchTerms.text));
		}
		
		private function initSourceText():void {
			if(html) {
				// Make pageSource textArea visible
    			pageSource.text = html.window.document.documentElement.outerHTML;
			}
		}
		]]>
    </mx:Script>
    <mx:VBox height="852" horizontalAlign="left" width="1044">
    	<mx:HBox>
    		<mx:Label text="Website"  width="112"/>
    		<mx:TextInput id="searchTerms" text="http://reddit.com" />
    		<mx:Button label="Show Page"
    			click="loadPage(event)" id="showPageButton" width="127"/>
    	</mx:HBox>
    	<mx:HBox>
    		<mx:Label text="Regular Expression" />
    		<mx:TextInput id="regexString"/>
    		<mx:Button label="Highlight Matches"
    			click="highlightMatches(event)" id="highlightButton" enabled="false"/>
    		<mx:Button label="Save"
    			id="saveButton" enabled="false"/>
    	</mx:HBox>
    	<mx:TabNavigator width="730" height="598">
    	    <mx:Canvas label="View" width="100%" height="100%">
    	        <mx:VBox height="100%" width="728" id="htmlBox" label="Page View" x="0">
    	        </mx:VBox>
    	    </mx:Canvas>
    	    <mx:VBox label="Source" id="sourceTab" width="100%" height="100%">
    	        <mx:TextArea width="100%" height="564" id="pageSource" addedToStage="initSourceText()"/>
    	    </mx:VBox>
    	    <mx:HBox label="Text Matches" width="100%" height="100%">
    	        <mx:Text width="730" height="100%" id="matchesText" text="" color="#0C5463"/>
    	    </mx:HBox>
    	</mx:TabNavigator>
    </mx:VBox>
</mx:WindowedApplication>
